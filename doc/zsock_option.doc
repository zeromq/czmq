#### zsock_option - get/set 0MQ socket options

The zsock_option class provides access to the 0MQ getsockopt/setsockopt API.

This class is generated, using the GSL code generator. See the sockopts
XML file, which provides the metadata, and the sock_option.gsl template,
which does the work.

This is the class interface:

    #if (ZMQ_VERSION_MAJOR == 4)
    //  Get socket options
    CZMQ_EXPORT int zsock_tos (zsock_t *self);
    CZMQ_EXPORT int zactor_tos (zactor_t *self);            //  For zactors
    CZMQ_EXPORT char * zsock_zap_domain (zsock_t *self);
    CZMQ_EXPORT char * zactor_zap_domain (zactor_t *self);  //  For zactors
    CZMQ_EXPORT int zsock_mechanism (zsock_t *self);
    CZMQ_EXPORT int zactor_mechanism (zactor_t *self);      //  For zactors
    CZMQ_EXPORT int zsock_plain_server (zsock_t *self);
    CZMQ_EXPORT int zactor_plain_server (zactor_t *self);   //  For zactors
    CZMQ_EXPORT char * zsock_plain_username (zsock_t *self);
    CZMQ_EXPORT char * zactor_plain_username (zactor_t *self);  //  For zactors
    CZMQ_EXPORT char * zsock_plain_password (zsock_t *self);
    CZMQ_EXPORT char * zactor_plain_password (zactor_t *self);  //  For zactors
    CZMQ_EXPORT int zsock_curve_server (zsock_t *self);
    CZMQ_EXPORT int zactor_curve_server (zactor_t *self);   //  For zactors
    CZMQ_EXPORT char * zsock_curve_publickey (zsock_t *self);
    CZMQ_EXPORT char * zactor_curve_publickey (zactor_t *self);  //  For zactors
    CZMQ_EXPORT char * zsock_curve_secretkey (zsock_t *self);
    CZMQ_EXPORT char * zactor_curve_secretkey (zactor_t *self);  //  For zactors
    CZMQ_EXPORT char * zsock_curve_serverkey (zsock_t *self);
    CZMQ_EXPORT char * zactor_curve_serverkey (zactor_t *self);  //  For zactors
    CZMQ_EXPORT int zsock_gssapi_server (zsock_t *self);
    CZMQ_EXPORT int zactor_gssapi_server (zactor_t *self);  //  For zactors
    CZMQ_EXPORT int zsock_gssapi_plaintext (zsock_t *self);
    CZMQ_EXPORT int zactor_gssapi_plaintext (zactor_t *self);  //  For zactors
    CZMQ_EXPORT char * zsock_gssapi_principal (zsock_t *self);
    CZMQ_EXPORT char * zactor_gssapi_principal (zactor_t *self);  //  For zactors
    CZMQ_EXPORT char * zsock_gssapi_service_principal (zsock_t *self);
    CZMQ_EXPORT char * zactor_gssapi_service_principal (zactor_t *self);  //  For zactors
    CZMQ_EXPORT int zsock_ipv6 (zsock_t *self);
    CZMQ_EXPORT int zactor_ipv6 (zactor_t *self);           //  For zactors
    CZMQ_EXPORT int zsock_immediate (zsock_t *self);
    CZMQ_EXPORT int zactor_immediate (zactor_t *self);      //  For zactors
    CZMQ_EXPORT int zsock_ipv4only (zsock_t *self);
    CZMQ_EXPORT int zactor_ipv4only (zactor_t *self);       //  For zactors
    CZMQ_EXPORT int zsock_type (zsock_t *self);
    CZMQ_EXPORT int zactor_type (zactor_t *self);           //  For zactors
    CZMQ_EXPORT int zsock_sndhwm (zsock_t *self);
    CZMQ_EXPORT int zactor_sndhwm (zactor_t *self);         //  For zactors
    CZMQ_EXPORT int zsock_rcvhwm (zsock_t *self);
    CZMQ_EXPORT int zactor_rcvhwm (zactor_t *self);         //  For zactors
    CZMQ_EXPORT int zsock_affinity (zsock_t *self);
    CZMQ_EXPORT int zactor_affinity (zactor_t *self);       //  For zactors
    CZMQ_EXPORT char * zsock_identity (zsock_t *self);
    CZMQ_EXPORT char * zactor_identity (zactor_t *self);    //  For zactors
    CZMQ_EXPORT int zsock_rate (zsock_t *self);
    CZMQ_EXPORT int zactor_rate (zactor_t *self);           //  For zactors
    CZMQ_EXPORT int zsock_recovery_ivl (zsock_t *self);
    CZMQ_EXPORT int zactor_recovery_ivl (zactor_t *self);   //  For zactors
    CZMQ_EXPORT int zsock_sndbuf (zsock_t *self);
    CZMQ_EXPORT int zactor_sndbuf (zactor_t *self);         //  For zactors
    CZMQ_EXPORT int zsock_rcvbuf (zsock_t *self);
    CZMQ_EXPORT int zactor_rcvbuf (zactor_t *self);         //  For zactors
    CZMQ_EXPORT int zsock_linger (zsock_t *self);
    CZMQ_EXPORT int zactor_linger (zactor_t *self);         //  For zactors
    CZMQ_EXPORT int zsock_reconnect_ivl (zsock_t *self);
    CZMQ_EXPORT int zactor_reconnect_ivl (zactor_t *self);  //  For zactors
    CZMQ_EXPORT int zsock_reconnect_ivl_max (zsock_t *self);
    CZMQ_EXPORT int zactor_reconnect_ivl_max (zactor_t *self);  //  For zactors
    CZMQ_EXPORT int zsock_backlog (zsock_t *self);
    CZMQ_EXPORT int zactor_backlog (zactor_t *self);        //  For zactors
    CZMQ_EXPORT int zsock_maxmsgsize (zsock_t *self);
    CZMQ_EXPORT int zactor_maxmsgsize (zactor_t *self);     //  For zactors
    CZMQ_EXPORT int zsock_multicast_hops (zsock_t *self);
    CZMQ_EXPORT int zactor_multicast_hops (zactor_t *self);  //  For zactors
    CZMQ_EXPORT int zsock_rcvtimeo (zsock_t *self);
    CZMQ_EXPORT int zactor_rcvtimeo (zactor_t *self);       //  For zactors
    CZMQ_EXPORT int zsock_sndtimeo (zsock_t *self);
    CZMQ_EXPORT int zactor_sndtimeo (zactor_t *self);       //  For zactors
    CZMQ_EXPORT int zsock_tcp_keepalive (zsock_t *self);
    CZMQ_EXPORT int zactor_tcp_keepalive (zactor_t *self);  //  For zactors
    CZMQ_EXPORT int zsock_tcp_keepalive_idle (zsock_t *self);
    CZMQ_EXPORT int zactor_tcp_keepalive_idle (zactor_t *self);  //  For zactors
    CZMQ_EXPORT int zsock_tcp_keepalive_cnt (zsock_t *self);
    CZMQ_EXPORT int zactor_tcp_keepalive_cnt (zactor_t *self);  //  For zactors
    CZMQ_EXPORT int zsock_tcp_keepalive_intvl (zsock_t *self);
    CZMQ_EXPORT int zactor_tcp_keepalive_intvl (zactor_t *self);  //  For zactors
    CZMQ_EXPORT char * zsock_tcp_accept_filter (zsock_t *self);
    CZMQ_EXPORT char * zactor_tcp_accept_filter (zactor_t *self);  //  For zactors
    CZMQ_EXPORT int zsock_rcvmore (zsock_t *self);
    CZMQ_EXPORT int zactor_rcvmore (zactor_t *self);        //  For zactors
    CZMQ_EXPORT int zsock_fd (zsock_t *self);
    CZMQ_EXPORT int zactor_fd (zactor_t *self);             //  For zactors
    CZMQ_EXPORT int zsock_events (zsock_t *self);
    CZMQ_EXPORT int zactor_events (zactor_t *self);         //  For zactors
    CZMQ_EXPORT char * zsock_last_endpoint (zsock_t *self);
    CZMQ_EXPORT char * zactor_last_endpoint (zactor_t *self);  //  For zactors
    
    //  Set socket options
    CZMQ_EXPORT void zsock_set_tos (zsock_t *self, int tos);
    CZMQ_EXPORT void zactor_set_tos (zactor_t *self, int tos);
    CZMQ_EXPORT void zsock_set_router_handover (zsock_t *self, int router_handover);
    CZMQ_EXPORT void zactor_set_router_handover (zactor_t *self, int router_handover);
    CZMQ_EXPORT void zsock_set_router_mandatory (zsock_t *self, int router_mandatory);
    CZMQ_EXPORT void zactor_set_router_mandatory (zactor_t *self, int router_mandatory);
    CZMQ_EXPORT void zsock_set_probe_router (zsock_t *self, int probe_router);
    CZMQ_EXPORT void zactor_set_probe_router (zactor_t *self, int probe_router);
    CZMQ_EXPORT void zsock_set_req_relaxed (zsock_t *self, int req_relaxed);
    CZMQ_EXPORT void zactor_set_req_relaxed (zactor_t *self, int req_relaxed);
    CZMQ_EXPORT void zsock_set_req_correlate (zsock_t *self, int req_correlate);
    CZMQ_EXPORT void zactor_set_req_correlate (zactor_t *self, int req_correlate);
    CZMQ_EXPORT void zsock_set_conflate (zsock_t *self, int conflate);
    CZMQ_EXPORT void zactor_set_conflate (zactor_t *self, int conflate);
    CZMQ_EXPORT void zsock_set_zap_domain (zsock_t *self, const char * zap_domain);
    CZMQ_EXPORT void zactor_set_zap_domain (zactor_t *self, const char * zap_domain);
    CZMQ_EXPORT void zsock_set_plain_server (zsock_t *self, int plain_server);
    CZMQ_EXPORT void zactor_set_plain_server (zactor_t *self, int plain_server);
    CZMQ_EXPORT void zsock_set_plain_username (zsock_t *self, const char * plain_username);
    CZMQ_EXPORT void zactor_set_plain_username (zactor_t *self, const char * plain_username);
    CZMQ_EXPORT void zsock_set_plain_password (zsock_t *self, const char * plain_password);
    CZMQ_EXPORT void zactor_set_plain_password (zactor_t *self, const char * plain_password);
    CZMQ_EXPORT void zsock_set_curve_server (zsock_t *self, int curve_server);
    CZMQ_EXPORT void zactor_set_curve_server (zactor_t *self, int curve_server);
    CZMQ_EXPORT void zsock_set_curve_publickey (zsock_t *self, const char * curve_publickey);
    CZMQ_EXPORT void zactor_set_curve_publickey (zactor_t *self, const char * curve_publickey);
    CZMQ_EXPORT void zsock_set_curve_publickey_bin (zsock_t *self, const byte *curve_publickey);
    CZMQ_EXPORT void zactor_set_curve_publickey_bin (zactor_t *self, const byte *curve_publickey);
    CZMQ_EXPORT void zsock_set_curve_secretkey (zsock_t *self, const char * curve_secretkey);
    CZMQ_EXPORT void zactor_set_curve_secretkey (zactor_t *self, const char * curve_secretkey);
    CZMQ_EXPORT void zsock_set_curve_secretkey_bin (zsock_t *self, const byte *curve_secretkey);
    CZMQ_EXPORT void zactor_set_curve_secretkey_bin (zactor_t *self, const byte *curve_secretkey);
    CZMQ_EXPORT void zsock_set_curve_serverkey (zsock_t *self, const char * curve_serverkey);
    CZMQ_EXPORT void zactor_set_curve_serverkey (zactor_t *self, const char * curve_serverkey);
    CZMQ_EXPORT void zsock_set_curve_serverkey_bin (zsock_t *self, const byte *curve_serverkey);
    CZMQ_EXPORT void zactor_set_curve_serverkey_bin (zactor_t *self, const byte *curve_serverkey);
    CZMQ_EXPORT void zsock_set_gssapi_server (zsock_t *self, int gssapi_server);
    CZMQ_EXPORT void zactor_set_gssapi_server (zactor_t *self, int gssapi_server);
    CZMQ_EXPORT void zsock_set_gssapi_plaintext (zsock_t *self, int gssapi_plaintext);
    CZMQ_EXPORT void zactor_set_gssapi_plaintext (zactor_t *self, int gssapi_plaintext);
    CZMQ_EXPORT void zsock_set_gssapi_principal (zsock_t *self, const char * gssapi_principal);
    CZMQ_EXPORT void zactor_set_gssapi_principal (zactor_t *self, const char * gssapi_principal);
    CZMQ_EXPORT void zsock_set_gssapi_service_principal (zsock_t *self, const char * gssapi_service_principal);
    CZMQ_EXPORT void zactor_set_gssapi_service_principal (zactor_t *self, const char * gssapi_service_principal);
    CZMQ_EXPORT void zsock_set_ipv6 (zsock_t *self, int ipv6);
    CZMQ_EXPORT void zactor_set_ipv6 (zactor_t *self, int ipv6);
    CZMQ_EXPORT void zsock_set_immediate (zsock_t *self, int immediate);
    CZMQ_EXPORT void zactor_set_immediate (zactor_t *self, int immediate);
    CZMQ_EXPORT void zsock_set_router_raw (zsock_t *self, int router_raw);
    CZMQ_EXPORT void zactor_set_router_raw (zactor_t *self, int router_raw);
    CZMQ_EXPORT void zsock_set_ipv4only (zsock_t *self, int ipv4only);
    CZMQ_EXPORT void zactor_set_ipv4only (zactor_t *self, int ipv4only);
    CZMQ_EXPORT void zsock_set_delay_attach_on_connect (zsock_t *self, int delay_attach_on_connect);
    CZMQ_EXPORT void zactor_set_delay_attach_on_connect (zactor_t *self, int delay_attach_on_connect);
    CZMQ_EXPORT void zsock_set_sndhwm (zsock_t *self, int sndhwm);
    CZMQ_EXPORT void zactor_set_sndhwm (zactor_t *self, int sndhwm);
    CZMQ_EXPORT void zsock_set_rcvhwm (zsock_t *self, int rcvhwm);
    CZMQ_EXPORT void zactor_set_rcvhwm (zactor_t *self, int rcvhwm);
    CZMQ_EXPORT void zsock_set_affinity (zsock_t *self, int affinity);
    CZMQ_EXPORT void zactor_set_affinity (zactor_t *self, int affinity);
    CZMQ_EXPORT void zsock_set_subscribe (zsock_t *self, const char * subscribe);
    CZMQ_EXPORT void zactor_set_subscribe (zactor_t *self, const char * subscribe);
    CZMQ_EXPORT void zsock_set_unsubscribe (zsock_t *self, const char * unsubscribe);
    CZMQ_EXPORT void zactor_set_unsubscribe (zactor_t *self, const char * unsubscribe);
    CZMQ_EXPORT void zsock_set_identity (zsock_t *self, const char * identity);
    CZMQ_EXPORT void zactor_set_identity (zactor_t *self, const char * identity);
    CZMQ_EXPORT void zsock_set_rate (zsock_t *self, int rate);
    CZMQ_EXPORT void zactor_set_rate (zactor_t *self, int rate);
    CZMQ_EXPORT void zsock_set_recovery_ivl (zsock_t *self, int recovery_ivl);
    CZMQ_EXPORT void zactor_set_recovery_ivl (zactor_t *self, int recovery_ivl);
    CZMQ_EXPORT void zsock_set_sndbuf (zsock_t *self, int sndbuf);
    CZMQ_EXPORT void zactor_set_sndbuf (zactor_t *self, int sndbuf);
    CZMQ_EXPORT void zsock_set_rcvbuf (zsock_t *self, int rcvbuf);
    CZMQ_EXPORT void zactor_set_rcvbuf (zactor_t *self, int rcvbuf);
    CZMQ_EXPORT void zsock_set_linger (zsock_t *self, int linger);
    CZMQ_EXPORT void zactor_set_linger (zactor_t *self, int linger);
    CZMQ_EXPORT void zsock_set_reconnect_ivl (zsock_t *self, int reconnect_ivl);
    CZMQ_EXPORT void zactor_set_reconnect_ivl (zactor_t *self, int reconnect_ivl);
    CZMQ_EXPORT void zsock_set_reconnect_ivl_max (zsock_t *self, int reconnect_ivl_max);
    CZMQ_EXPORT void zactor_set_reconnect_ivl_max (zactor_t *self, int reconnect_ivl_max);
    CZMQ_EXPORT void zsock_set_backlog (zsock_t *self, int backlog);
    CZMQ_EXPORT void zactor_set_backlog (zactor_t *self, int backlog);
    CZMQ_EXPORT void zsock_set_maxmsgsize (zsock_t *self, int maxmsgsize);
    CZMQ_EXPORT void zactor_set_maxmsgsize (zactor_t *self, int maxmsgsize);
    CZMQ_EXPORT void zsock_set_multicast_hops (zsock_t *self, int multicast_hops);
    CZMQ_EXPORT void zactor_set_multicast_hops (zactor_t *self, int multicast_hops);
    CZMQ_EXPORT void zsock_set_rcvtimeo (zsock_t *self, int rcvtimeo);
    CZMQ_EXPORT void zactor_set_rcvtimeo (zactor_t *self, int rcvtimeo);
    CZMQ_EXPORT void zsock_set_sndtimeo (zsock_t *self, int sndtimeo);
    CZMQ_EXPORT void zactor_set_sndtimeo (zactor_t *self, int sndtimeo);
    CZMQ_EXPORT void zsock_set_xpub_verbose (zsock_t *self, int xpub_verbose);
    CZMQ_EXPORT void zactor_set_xpub_verbose (zactor_t *self, int xpub_verbose);
    CZMQ_EXPORT void zsock_set_tcp_keepalive (zsock_t *self, int tcp_keepalive);
    CZMQ_EXPORT void zactor_set_tcp_keepalive (zactor_t *self, int tcp_keepalive);
    CZMQ_EXPORT void zsock_set_tcp_keepalive_idle (zsock_t *self, int tcp_keepalive_idle);
    CZMQ_EXPORT void zactor_set_tcp_keepalive_idle (zactor_t *self, int tcp_keepalive_idle);
    CZMQ_EXPORT void zsock_set_tcp_keepalive_cnt (zsock_t *self, int tcp_keepalive_cnt);
    CZMQ_EXPORT void zactor_set_tcp_keepalive_cnt (zactor_t *self, int tcp_keepalive_cnt);
    CZMQ_EXPORT void zsock_set_tcp_keepalive_intvl (zsock_t *self, int tcp_keepalive_intvl);
    CZMQ_EXPORT void zactor_set_tcp_keepalive_intvl (zactor_t *self, int tcp_keepalive_intvl);
    CZMQ_EXPORT void zsock_set_tcp_accept_filter (zsock_t *self, const char * tcp_accept_filter);
    CZMQ_EXPORT void zactor_set_tcp_accept_filter (zactor_t *self, const char * tcp_accept_filter);
    #endif
    
    #if (ZMQ_VERSION_MAJOR == 3)
    //  Get socket options
    CZMQ_EXPORT int zsock_ipv4only (zsock_t *self);
    CZMQ_EXPORT int zactor_ipv4only (zactor_t *self);       //  For zactors
    CZMQ_EXPORT int zsock_type (zsock_t *self);
    CZMQ_EXPORT int zactor_type (zactor_t *self);           //  For zactors
    CZMQ_EXPORT int zsock_sndhwm (zsock_t *self);
    CZMQ_EXPORT int zactor_sndhwm (zactor_t *self);         //  For zactors
    CZMQ_EXPORT int zsock_rcvhwm (zsock_t *self);
    CZMQ_EXPORT int zactor_rcvhwm (zactor_t *self);         //  For zactors
    CZMQ_EXPORT int zsock_affinity (zsock_t *self);
    CZMQ_EXPORT int zactor_affinity (zactor_t *self);       //  For zactors
    CZMQ_EXPORT char * zsock_identity (zsock_t *self);
    CZMQ_EXPORT char * zactor_identity (zactor_t *self);    //  For zactors
    CZMQ_EXPORT int zsock_rate (zsock_t *self);
    CZMQ_EXPORT int zactor_rate (zactor_t *self);           //  For zactors
    CZMQ_EXPORT int zsock_recovery_ivl (zsock_t *self);
    CZMQ_EXPORT int zactor_recovery_ivl (zactor_t *self);   //  For zactors
    CZMQ_EXPORT int zsock_sndbuf (zsock_t *self);
    CZMQ_EXPORT int zactor_sndbuf (zactor_t *self);         //  For zactors
    CZMQ_EXPORT int zsock_rcvbuf (zsock_t *self);
    CZMQ_EXPORT int zactor_rcvbuf (zactor_t *self);         //  For zactors
    CZMQ_EXPORT int zsock_linger (zsock_t *self);
    CZMQ_EXPORT int zactor_linger (zactor_t *self);         //  For zactors
    CZMQ_EXPORT int zsock_reconnect_ivl (zsock_t *self);
    CZMQ_EXPORT int zactor_reconnect_ivl (zactor_t *self);  //  For zactors
    CZMQ_EXPORT int zsock_reconnect_ivl_max (zsock_t *self);
    CZMQ_EXPORT int zactor_reconnect_ivl_max (zactor_t *self);  //  For zactors
    CZMQ_EXPORT int zsock_backlog (zsock_t *self);
    CZMQ_EXPORT int zactor_backlog (zactor_t *self);        //  For zactors
    CZMQ_EXPORT int zsock_maxmsgsize (zsock_t *self);
    CZMQ_EXPORT int zactor_maxmsgsize (zactor_t *self);     //  For zactors
    CZMQ_EXPORT int zsock_multicast_hops (zsock_t *self);
    CZMQ_EXPORT int zactor_multicast_hops (zactor_t *self);  //  For zactors
    CZMQ_EXPORT int zsock_rcvtimeo (zsock_t *self);
    CZMQ_EXPORT int zactor_rcvtimeo (zactor_t *self);       //  For zactors
    CZMQ_EXPORT int zsock_sndtimeo (zsock_t *self);
    CZMQ_EXPORT int zactor_sndtimeo (zactor_t *self);       //  For zactors
    CZMQ_EXPORT int zsock_tcp_keepalive (zsock_t *self);
    CZMQ_EXPORT int zactor_tcp_keepalive (zactor_t *self);  //  For zactors
    CZMQ_EXPORT int zsock_tcp_keepalive_idle (zsock_t *self);
    CZMQ_EXPORT int zactor_tcp_keepalive_idle (zactor_t *self);  //  For zactors
    CZMQ_EXPORT int zsock_tcp_keepalive_cnt (zsock_t *self);
    CZMQ_EXPORT int zactor_tcp_keepalive_cnt (zactor_t *self);  //  For zactors
    CZMQ_EXPORT int zsock_tcp_keepalive_intvl (zsock_t *self);
    CZMQ_EXPORT int zactor_tcp_keepalive_intvl (zactor_t *self);  //  For zactors
    CZMQ_EXPORT char * zsock_tcp_accept_filter (zsock_t *self);
    CZMQ_EXPORT char * zactor_tcp_accept_filter (zactor_t *self);  //  For zactors
    CZMQ_EXPORT int zsock_rcvmore (zsock_t *self);
    CZMQ_EXPORT int zactor_rcvmore (zactor_t *self);        //  For zactors
    CZMQ_EXPORT int zsock_fd (zsock_t *self);
    CZMQ_EXPORT int zactor_fd (zactor_t *self);             //  For zactors
    CZMQ_EXPORT int zsock_events (zsock_t *self);
    CZMQ_EXPORT int zactor_events (zactor_t *self);         //  For zactors
    CZMQ_EXPORT char * zsock_last_endpoint (zsock_t *self);
    CZMQ_EXPORT char * zactor_last_endpoint (zactor_t *self);  //  For zactors
    
    //  Set socket options
    CZMQ_EXPORT void zsock_set_router_raw (zsock_t *self, int router_raw);
    CZMQ_EXPORT void zactor_set_router_raw (zactor_t *self, int router_raw);
    CZMQ_EXPORT void zsock_set_ipv4only (zsock_t *self, int ipv4only);
    CZMQ_EXPORT void zactor_set_ipv4only (zactor_t *self, int ipv4only);
    CZMQ_EXPORT void zsock_set_delay_attach_on_connect (zsock_t *self, int delay_attach_on_connect);
    CZMQ_EXPORT void zactor_set_delay_attach_on_connect (zactor_t *self, int delay_attach_on_connect);
    CZMQ_EXPORT void zsock_set_sndhwm (zsock_t *self, int sndhwm);
    CZMQ_EXPORT void zactor_set_sndhwm (zactor_t *self, int sndhwm);
    CZMQ_EXPORT void zsock_set_rcvhwm (zsock_t *self, int rcvhwm);
    CZMQ_EXPORT void zactor_set_rcvhwm (zactor_t *self, int rcvhwm);
    CZMQ_EXPORT void zsock_set_affinity (zsock_t *self, int affinity);
    CZMQ_EXPORT void zactor_set_affinity (zactor_t *self, int affinity);
    CZMQ_EXPORT void zsock_set_subscribe (zsock_t *self, const char * subscribe);
    CZMQ_EXPORT void zactor_set_subscribe (zactor_t *self, const char * subscribe);
    CZMQ_EXPORT void zsock_set_unsubscribe (zsock_t *self, const char * unsubscribe);
    CZMQ_EXPORT void zactor_set_unsubscribe (zactor_t *self, const char * unsubscribe);
    CZMQ_EXPORT void zsock_set_identity (zsock_t *self, const char * identity);
    CZMQ_EXPORT void zactor_set_identity (zactor_t *self, const char * identity);
    CZMQ_EXPORT void zsock_set_rate (zsock_t *self, int rate);
    CZMQ_EXPORT void zactor_set_rate (zactor_t *self, int rate);
    CZMQ_EXPORT void zsock_set_recovery_ivl (zsock_t *self, int recovery_ivl);
    CZMQ_EXPORT void zactor_set_recovery_ivl (zactor_t *self, int recovery_ivl);
    CZMQ_EXPORT void zsock_set_sndbuf (zsock_t *self, int sndbuf);
    CZMQ_EXPORT void zactor_set_sndbuf (zactor_t *self, int sndbuf);
    CZMQ_EXPORT void zsock_set_rcvbuf (zsock_t *self, int rcvbuf);
    CZMQ_EXPORT void zactor_set_rcvbuf (zactor_t *self, int rcvbuf);
    CZMQ_EXPORT void zsock_set_linger (zsock_t *self, int linger);
    CZMQ_EXPORT void zactor_set_linger (zactor_t *self, int linger);
    CZMQ_EXPORT void zsock_set_reconnect_ivl (zsock_t *self, int reconnect_ivl);
    CZMQ_EXPORT void zactor_set_reconnect_ivl (zactor_t *self, int reconnect_ivl);
    CZMQ_EXPORT void zsock_set_reconnect_ivl_max (zsock_t *self, int reconnect_ivl_max);
    CZMQ_EXPORT void zactor_set_reconnect_ivl_max (zactor_t *self, int reconnect_ivl_max);
    CZMQ_EXPORT void zsock_set_backlog (zsock_t *self, int backlog);
    CZMQ_EXPORT void zactor_set_backlog (zactor_t *self, int backlog);
    CZMQ_EXPORT void zsock_set_maxmsgsize (zsock_t *self, int maxmsgsize);
    CZMQ_EXPORT void zactor_set_maxmsgsize (zactor_t *self, int maxmsgsize);
    CZMQ_EXPORT void zsock_set_multicast_hops (zsock_t *self, int multicast_hops);
    CZMQ_EXPORT void zactor_set_multicast_hops (zactor_t *self, int multicast_hops);
    CZMQ_EXPORT void zsock_set_rcvtimeo (zsock_t *self, int rcvtimeo);
    CZMQ_EXPORT void zactor_set_rcvtimeo (zactor_t *self, int rcvtimeo);
    CZMQ_EXPORT void zsock_set_sndtimeo (zsock_t *self, int sndtimeo);
    CZMQ_EXPORT void zactor_set_sndtimeo (zactor_t *self, int sndtimeo);
    CZMQ_EXPORT void zsock_set_xpub_verbose (zsock_t *self, int xpub_verbose);
    CZMQ_EXPORT void zactor_set_xpub_verbose (zactor_t *self, int xpub_verbose);
    CZMQ_EXPORT void zsock_set_tcp_keepalive (zsock_t *self, int tcp_keepalive);
    CZMQ_EXPORT void zactor_set_tcp_keepalive (zactor_t *self, int tcp_keepalive);
    CZMQ_EXPORT void zsock_set_tcp_keepalive_idle (zsock_t *self, int tcp_keepalive_idle);
    CZMQ_EXPORT void zactor_set_tcp_keepalive_idle (zactor_t *self, int tcp_keepalive_idle);
    CZMQ_EXPORT void zsock_set_tcp_keepalive_cnt (zsock_t *self, int tcp_keepalive_cnt);
    CZMQ_EXPORT void zactor_set_tcp_keepalive_cnt (zactor_t *self, int tcp_keepalive_cnt);
    CZMQ_EXPORT void zsock_set_tcp_keepalive_intvl (zsock_t *self, int tcp_keepalive_intvl);
    CZMQ_EXPORT void zactor_set_tcp_keepalive_intvl (zactor_t *self, int tcp_keepalive_intvl);
    CZMQ_EXPORT void zsock_set_tcp_accept_filter (zsock_t *self, const char * tcp_accept_filter);
    CZMQ_EXPORT void zactor_set_tcp_accept_filter (zactor_t *self, const char * tcp_accept_filter);
    #endif
    
    #if (ZMQ_VERSION_MAJOR == 2)
    //  Get socket options
    CZMQ_EXPORT int zsock_hwm (zsock_t *self);
    CZMQ_EXPORT int zactor_hwm (zactor_t *self);            //  For zactors
    CZMQ_EXPORT int zsock_swap (zsock_t *self);
    CZMQ_EXPORT int zactor_swap (zactor_t *self);           //  For zactors
    CZMQ_EXPORT int zsock_affinity (zsock_t *self);
    CZMQ_EXPORT int zactor_affinity (zactor_t *self);       //  For zactors
    CZMQ_EXPORT char * zsock_identity (zsock_t *self);
    CZMQ_EXPORT char * zactor_identity (zactor_t *self);    //  For zactors
    CZMQ_EXPORT int zsock_rate (zsock_t *self);
    CZMQ_EXPORT int zactor_rate (zactor_t *self);           //  For zactors
    CZMQ_EXPORT int zsock_recovery_ivl (zsock_t *self);
    CZMQ_EXPORT int zactor_recovery_ivl (zactor_t *self);   //  For zactors
    CZMQ_EXPORT int zsock_recovery_ivl_msec (zsock_t *self);
    CZMQ_EXPORT int zactor_recovery_ivl_msec (zactor_t *self);  //  For zactors
    CZMQ_EXPORT int zsock_mcast_loop (zsock_t *self);
    CZMQ_EXPORT int zactor_mcast_loop (zactor_t *self);     //  For zactors
    #   if (ZMQ_VERSION_MINOR == 2)
    CZMQ_EXPORT int zsock_rcvtimeo (zsock_t *self);
    CZMQ_EXPORT int zactor_rcvtimeo (zactor_t *self);       //  For zactors
    #   endif
    #   if (ZMQ_VERSION_MINOR == 2)
    CZMQ_EXPORT int zsock_sndtimeo (zsock_t *self);
    CZMQ_EXPORT int zactor_sndtimeo (zactor_t *self);       //  For zactors
    #   endif
    CZMQ_EXPORT int zsock_sndbuf (zsock_t *self);
    CZMQ_EXPORT int zactor_sndbuf (zactor_t *self);         //  For zactors
    CZMQ_EXPORT int zsock_rcvbuf (zsock_t *self);
    CZMQ_EXPORT int zactor_rcvbuf (zactor_t *self);         //  For zactors
    CZMQ_EXPORT int zsock_linger (zsock_t *self);
    CZMQ_EXPORT int zactor_linger (zactor_t *self);         //  For zactors
    CZMQ_EXPORT int zsock_reconnect_ivl (zsock_t *self);
    CZMQ_EXPORT int zactor_reconnect_ivl (zactor_t *self);  //  For zactors
    CZMQ_EXPORT int zsock_reconnect_ivl_max (zsock_t *self);
    CZMQ_EXPORT int zactor_reconnect_ivl_max (zactor_t *self);  //  For zactors
    CZMQ_EXPORT int zsock_backlog (zsock_t *self);
    CZMQ_EXPORT int zactor_backlog (zactor_t *self);        //  For zactors
    CZMQ_EXPORT int zsock_type (zsock_t *self);
    CZMQ_EXPORT int zactor_type (zactor_t *self);           //  For zactors
    CZMQ_EXPORT int zsock_rcvmore (zsock_t *self);
    CZMQ_EXPORT int zactor_rcvmore (zactor_t *self);        //  For zactors
    CZMQ_EXPORT int zsock_fd (zsock_t *self);
    CZMQ_EXPORT int zactor_fd (zactor_t *self);             //  For zactors
    CZMQ_EXPORT int zsock_events (zsock_t *self);
    CZMQ_EXPORT int zactor_events (zactor_t *self);         //  For zactors
    
    //  Set socket options
    CZMQ_EXPORT void zsock_set_hwm (zsock_t *self, int hwm);
    CZMQ_EXPORT void zactor_set_hwm (zactor_t *self, int hwm);
    CZMQ_EXPORT void zsock_set_swap (zsock_t *self, int swap);
    CZMQ_EXPORT void zactor_set_swap (zactor_t *self, int swap);
    CZMQ_EXPORT void zsock_set_affinity (zsock_t *self, int affinity);
    CZMQ_EXPORT void zactor_set_affinity (zactor_t *self, int affinity);
    CZMQ_EXPORT void zsock_set_identity (zsock_t *self, const char * identity);
    CZMQ_EXPORT void zactor_set_identity (zactor_t *self, const char * identity);
    CZMQ_EXPORT void zsock_set_rate (zsock_t *self, int rate);
    CZMQ_EXPORT void zactor_set_rate (zactor_t *self, int rate);
    CZMQ_EXPORT void zsock_set_recovery_ivl (zsock_t *self, int recovery_ivl);
    CZMQ_EXPORT void zactor_set_recovery_ivl (zactor_t *self, int recovery_ivl);
    CZMQ_EXPORT void zsock_set_recovery_ivl_msec (zsock_t *self, int recovery_ivl_msec);
    CZMQ_EXPORT void zactor_set_recovery_ivl_msec (zactor_t *self, int recovery_ivl_msec);
    CZMQ_EXPORT void zsock_set_mcast_loop (zsock_t *self, int mcast_loop);
    CZMQ_EXPORT void zactor_set_mcast_loop (zactor_t *self, int mcast_loop);
    #   if (ZMQ_VERSION_MINOR == 2)
    CZMQ_EXPORT void zsock_set_rcvtimeo (zsock_t *self, int rcvtimeo);
    CZMQ_EXPORT void zactor_set_rcvtimeo (zactor_t *self, int rcvtimeo);
    #   endif
    #   if (ZMQ_VERSION_MINOR == 2)
    CZMQ_EXPORT void zsock_set_sndtimeo (zsock_t *self, int sndtimeo);
    CZMQ_EXPORT void zactor_set_sndtimeo (zactor_t *self, int sndtimeo);
    #   endif
    CZMQ_EXPORT void zsock_set_sndbuf (zsock_t *self, int sndbuf);
    CZMQ_EXPORT void zactor_set_sndbuf (zactor_t *self, int sndbuf);
    CZMQ_EXPORT void zsock_set_rcvbuf (zsock_t *self, int rcvbuf);
    CZMQ_EXPORT void zactor_set_rcvbuf (zactor_t *self, int rcvbuf);
    CZMQ_EXPORT void zsock_set_linger (zsock_t *self, int linger);
    CZMQ_EXPORT void zactor_set_linger (zactor_t *self, int linger);
    CZMQ_EXPORT void zsock_set_reconnect_ivl (zsock_t *self, int reconnect_ivl);
    CZMQ_EXPORT void zactor_set_reconnect_ivl (zactor_t *self, int reconnect_ivl);
    CZMQ_EXPORT void zsock_set_reconnect_ivl_max (zsock_t *self, int reconnect_ivl_max);
    CZMQ_EXPORT void zactor_set_reconnect_ivl_max (zactor_t *self, int reconnect_ivl_max);
    CZMQ_EXPORT void zsock_set_backlog (zsock_t *self, int backlog);
    CZMQ_EXPORT void zactor_set_backlog (zactor_t *self, int backlog);
    CZMQ_EXPORT void zsock_set_subscribe (zsock_t *self, const char * subscribe);
    CZMQ_EXPORT void zactor_set_subscribe (zactor_t *self, const char * subscribe);
    CZMQ_EXPORT void zsock_set_unsubscribe (zsock_t *self, const char * unsubscribe);
    CZMQ_EXPORT void zactor_set_unsubscribe (zactor_t *self, const char * unsubscribe);
    #endif
    
    //  Self test of this class
    CZMQ_EXPORT void zsock_option_test (bool verbose);

This is the class self test code:

    zsock_t *self;
#if (ZMQ_VERSION_MAJOR == 4)
#     if defined (ZMQ_TOS)
    self = zsock_new (ZMQ_DEALER);
    assert (self);
    zsock_set_tos (self, 1);
    assert (zsock_tos (self) == 1);
    zsock_tos (self);
    zsock_destroy (&self);
#     endif
#     if defined (ZMQ_ROUTER_HANDOVER)
    self = zsock_new (ZMQ_ROUTER);
    assert (self);
    zsock_set_router_handover (self, 1);
    zsock_destroy (&self);
#     endif
#     if defined (ZMQ_ROUTER_MANDATORY)
    self = zsock_new (ZMQ_ROUTER);
    assert (self);
    zsock_set_router_mandatory (self, 1);
    zsock_destroy (&self);
#     endif
#     if defined (ZMQ_PROBE_ROUTER)
    self = zsock_new (ZMQ_DEALER);
    assert (self);
    zsock_set_probe_router (self, 1);
    zsock_destroy (&self);
#     endif
#     if defined (ZMQ_REQ_RELAXED)
    self = zsock_new (ZMQ_REQ);
    assert (self);
    zsock_set_req_relaxed (self, 1);
    zsock_destroy (&self);
#     endif
#     if defined (ZMQ_REQ_CORRELATE)
    self = zsock_new (ZMQ_REQ);
    assert (self);
    zsock_set_req_correlate (self, 1);
    zsock_destroy (&self);
#     endif
#     if defined (ZMQ_CONFLATE)
    self = zsock_new (ZMQ_PUSH);
    assert (self);
    zsock_set_conflate (self, 1);
    zsock_destroy (&self);
#     endif
#     if defined (ZMQ_ZAP_DOMAIN)
    self = zsock_new (ZMQ_SUB);
    assert (self);
    zsock_set_zap_domain (self, "test");
    char *zap_domain = zsock_zap_domain (self);
    assert (zap_domain);
    free (zap_domain);
    zsock_destroy (&self);
#     endif
#     if defined (ZMQ_MECHANISM)
    self = zsock_new (ZMQ_SUB);
    assert (self);
    zsock_mechanism (self);
    zsock_destroy (&self);
#     endif
#     if defined (ZMQ_PLAIN_SERVER)
    self = zsock_new (ZMQ_PUB);
    assert (self);
    zsock_set_plain_server (self, 1);
    assert (zsock_plain_server (self) == 1);
    zsock_plain_server (self);
    zsock_destroy (&self);
#     endif
#     if defined (ZMQ_PLAIN_USERNAME)
    self = zsock_new (ZMQ_SUB);
    assert (self);
    zsock_set_plain_username (self, "test");
    char *plain_username = zsock_plain_username (self);
    assert (plain_username);
    free (plain_username);
    zsock_destroy (&self);
#     endif
#     if defined (ZMQ_PLAIN_PASSWORD)
    self = zsock_new (ZMQ_SUB);
    assert (self);
    zsock_set_plain_password (self, "test");
    char *plain_password = zsock_plain_password (self);
    assert (plain_password);
    free (plain_password);
    zsock_destroy (&self);
#     endif
#     if defined (ZMQ_IPV6)
    self = zsock_new (ZMQ_SUB);
    assert (self);
    zsock_set_ipv6 (self, 1);
    assert (zsock_ipv6 (self) == 1);
    zsock_ipv6 (self);
    zsock_destroy (&self);
#     endif
#     if defined (ZMQ_IMMEDIATE)
    self = zsock_new (ZMQ_DEALER);
    assert (self);
    zsock_set_immediate (self, 1);
    assert (zsock_immediate (self) == 1);
    zsock_immediate (self);
    zsock_destroy (&self);
#     endif
#     if defined (ZMQ_ROUTER_RAW)
    self = zsock_new (ZMQ_ROUTER);
    assert (self);
    zsock_set_router_raw (self, 1);
    zsock_destroy (&self);
#     endif
#     if defined (ZMQ_IPV4ONLY)
    self = zsock_new (ZMQ_SUB);
    assert (self);
    zsock_set_ipv4only (self, 1);
    assert (zsock_ipv4only (self) == 1);
    zsock_ipv4only (self);
    zsock_destroy (&self);
#     endif
#     if defined (ZMQ_DELAY_ATTACH_ON_CONNECT)
    self = zsock_new (ZMQ_PUB);
    assert (self);
    zsock_set_delay_attach_on_connect (self, 1);
    zsock_destroy (&self);
#     endif
#     if defined (ZMQ_TYPE)
    self = zsock_new (ZMQ_SUB);
    assert (self);
    zsock_type (self);
    zsock_destroy (&self);
#     endif
#     if defined (ZMQ_SNDHWM)
    self = zsock_new (ZMQ_PUB);
    assert (self);
    zsock_set_sndhwm (self, 1);
    assert (zsock_sndhwm (self) == 1);
    zsock_sndhwm (self);
    zsock_destroy (&self);
#     endif
#     if defined (ZMQ_RCVHWM)
    self = zsock_new (ZMQ_SUB);
    assert (self);
    zsock_set_rcvhwm (self, 1);
    assert (zsock_rcvhwm (self) == 1);
    zsock_rcvhwm (self);
    zsock_destroy (&self);
#     endif
#     if defined (ZMQ_AFFINITY)
    self = zsock_new (ZMQ_SUB);
    assert (self);
    zsock_set_affinity (self, 1);
    assert (zsock_affinity (self) == 1);
    zsock_affinity (self);
    zsock_destroy (&self);
#     endif
#     if defined (ZMQ_SUBSCRIBE)
    self = zsock_new (ZMQ_SUB);
    assert (self);
    zsock_set_subscribe (self, "test");
    zsock_destroy (&self);
#     endif
#     if defined (ZMQ_UNSUBSCRIBE)
    self = zsock_new (ZMQ_SUB);
    assert (self);
    zsock_set_unsubscribe (self, "test");
    zsock_destroy (&self);
#     endif
#     if defined (ZMQ_IDENTITY)
    self = zsock_new (ZMQ_DEALER);
    assert (self);
    zsock_set_identity (self, "test");
    char *identity = zsock_identity (self);
    assert (identity);
    free (identity);
    zsock_destroy (&self);
#     endif
#     if defined (ZMQ_RATE)
    self = zsock_new (ZMQ_SUB);
    assert (self);
    zsock_set_rate (self, 1);
    assert (zsock_rate (self) == 1);
    zsock_rate (self);
    zsock_destroy (&self);
#     endif
#     if defined (ZMQ_RECOVERY_IVL)
    self = zsock_new (ZMQ_SUB);
    assert (self);
    zsock_set_recovery_ivl (self, 1);
    assert (zsock_recovery_ivl (self) == 1);
    zsock_recovery_ivl (self);
    zsock_destroy (&self);
#     endif
#     if defined (ZMQ_SNDBUF)
    self = zsock_new (ZMQ_PUB);
    assert (self);
    zsock_set_sndbuf (self, 1);
    assert (zsock_sndbuf (self) == 1);
    zsock_sndbuf (self);
    zsock_destroy (&self);
#     endif
#     if defined (ZMQ_RCVBUF)
    self = zsock_new (ZMQ_SUB);
    assert (self);
    zsock_set_rcvbuf (self, 1);
    assert (zsock_rcvbuf (self) == 1);
    zsock_rcvbuf (self);
    zsock_destroy (&self);
#     endif
#     if defined (ZMQ_LINGER)
    self = zsock_new (ZMQ_SUB);
    assert (self);
    zsock_set_linger (self, 1);
    assert (zsock_linger (self) == 1);
    zsock_linger (self);
    zsock_destroy (&self);
#     endif
#     if defined (ZMQ_RECONNECT_IVL)
    self = zsock_new (ZMQ_SUB);
    assert (self);
    zsock_set_reconnect_ivl (self, 1);
    assert (zsock_reconnect_ivl (self) == 1);
    zsock_reconnect_ivl (self);
    zsock_destroy (&self);
#     endif
#     if defined (ZMQ_RECONNECT_IVL_MAX)
    self = zsock_new (ZMQ_SUB);
    assert (self);
    zsock_set_reconnect_ivl_max (self, 1);
    assert (zsock_reconnect_ivl_max (self) == 1);
    zsock_reconnect_ivl_max (self);
    zsock_destroy (&self);
#     endif
#     if defined (ZMQ_BACKLOG)
    self = zsock_new (ZMQ_SUB);
    assert (self);
    zsock_set_backlog (self, 1);
    assert (zsock_backlog (self) == 1);
    zsock_backlog (self);
    zsock_destroy (&self);
#     endif
#     if defined (ZMQ_MAXMSGSIZE)
    self = zsock_new (ZMQ_SUB);
    assert (self);
    zsock_set_maxmsgsize (self, 1);
    assert (zsock_maxmsgsize (self) == 1);
    zsock_maxmsgsize (self);
    zsock_destroy (&self);
#     endif
#     if defined (ZMQ_MULTICAST_HOPS)
    self = zsock_new (ZMQ_SUB);
    assert (self);
    zsock_set_multicast_hops (self, 1);
    assert (zsock_multicast_hops (self) == 1);
    zsock_multicast_hops (self);
    zsock_destroy (&self);
#     endif
#     if defined (ZMQ_RCVTIMEO)
    self = zsock_new (ZMQ_SUB);
    assert (self);
    zsock_set_rcvtimeo (self, 1);
    assert (zsock_rcvtimeo (self) == 1);
    zsock_rcvtimeo (self);
    zsock_destroy (&self);
#     endif
#     if defined (ZMQ_SNDTIMEO)
    self = zsock_new (ZMQ_SUB);
    assert (self);
    zsock_set_sndtimeo (self, 1);
    assert (zsock_sndtimeo (self) == 1);
    zsock_sndtimeo (self);
    zsock_destroy (&self);
#     endif
#     if defined (ZMQ_XPUB_VERBOSE)
    self = zsock_new (ZMQ_XPUB);
    assert (self);
    zsock_set_xpub_verbose (self, 1);
    zsock_destroy (&self);
#     endif
#     if defined (ZMQ_TCP_KEEPALIVE)
    self = zsock_new (ZMQ_SUB);
    assert (self);
    zsock_set_tcp_keepalive (self, 1);
    assert (zsock_tcp_keepalive (self) == 1);
    zsock_tcp_keepalive (self);
    zsock_destroy (&self);
#     endif
#     if defined (ZMQ_TCP_KEEPALIVE_IDLE)
    self = zsock_new (ZMQ_SUB);
    assert (self);
    zsock_set_tcp_keepalive_idle (self, 1);
    assert (zsock_tcp_keepalive_idle (self) == 1);
    zsock_tcp_keepalive_idle (self);
    zsock_destroy (&self);
#     endif
#     if defined (ZMQ_TCP_KEEPALIVE_CNT)
    self = zsock_new (ZMQ_SUB);
    assert (self);
    zsock_set_tcp_keepalive_cnt (self, 1);
    assert (zsock_tcp_keepalive_cnt (self) == 1);
    zsock_tcp_keepalive_cnt (self);
    zsock_destroy (&self);
#     endif
#     if defined (ZMQ_TCP_KEEPALIVE_INTVL)
    self = zsock_new (ZMQ_SUB);
    assert (self);
    zsock_set_tcp_keepalive_intvl (self, 1);
    assert (zsock_tcp_keepalive_intvl (self) == 1);
    zsock_tcp_keepalive_intvl (self);
    zsock_destroy (&self);
#     endif
#     if defined (ZMQ_TCP_ACCEPT_FILTER)
    self = zsock_new (ZMQ_SUB);
    assert (self);
    zsock_set_tcp_accept_filter (self, "127.0.0.1");
    char *tcp_accept_filter = zsock_tcp_accept_filter (self);
    assert (tcp_accept_filter);
    free (tcp_accept_filter);
    zsock_destroy (&self);
#     endif
#     if defined (ZMQ_RCVMORE)
    self = zsock_new (ZMQ_SUB);
    assert (self);
    zsock_rcvmore (self);
    zsock_destroy (&self);
#     endif
#     if defined (ZMQ_FD)
    self = zsock_new (ZMQ_SUB);
    assert (self);
    zsock_fd (self);
    zsock_destroy (&self);
#     endif
#     if defined (ZMQ_EVENTS)
    self = zsock_new (ZMQ_SUB);
    assert (self);
    zsock_events (self);
    zsock_destroy (&self);
#     endif
#     if defined (ZMQ_LAST_ENDPOINT)
    self = zsock_new (ZMQ_SUB);
    assert (self);
    char *last_endpoint = zsock_last_endpoint (self);
    assert (last_endpoint);
    free (last_endpoint);
    zsock_destroy (&self);
#     endif
#endif

#if (ZMQ_VERSION_MAJOR == 3)
#     if defined (ZMQ_ROUTER_RAW)
    self = zsock_new (ZMQ_ROUTER);
    assert (self);
    zsock_set_router_raw (self, 1);
    zsock_destroy (&self);
#     endif
#     if defined (ZMQ_IPV4ONLY)
    self = zsock_new (ZMQ_SUB);
    assert (self);
    zsock_set_ipv4only (self, 1);
    assert (zsock_ipv4only (self) == 1);
    zsock_ipv4only (self);
    zsock_destroy (&self);
#     endif
#     if defined (ZMQ_DELAY_ATTACH_ON_CONNECT)
    self = zsock_new (ZMQ_PUB);
    assert (self);
    zsock_set_delay_attach_on_connect (self, 1);
    zsock_destroy (&self);
#     endif
#     if defined (ZMQ_TYPE)
    self = zsock_new (ZMQ_SUB);
    assert (self);
    zsock_type (self);
    zsock_destroy (&self);
#     endif
#     if defined (ZMQ_SNDHWM)
    self = zsock_new (ZMQ_PUB);
    assert (self);
    zsock_set_sndhwm (self, 1);
    assert (zsock_sndhwm (self) == 1);
    zsock_sndhwm (self);
    zsock_destroy (&self);
#     endif
#     if defined (ZMQ_RCVHWM)
    self = zsock_new (ZMQ_SUB);
    assert (self);
    zsock_set_rcvhwm (self, 1);
    assert (zsock_rcvhwm (self) == 1);
    zsock_rcvhwm (self);
    zsock_destroy (&self);
#     endif
#     if defined (ZMQ_AFFINITY)
    self = zsock_new (ZMQ_SUB);
    assert (self);
    zsock_set_affinity (self, 1);
    assert (zsock_affinity (self) == 1);
    zsock_affinity (self);
    zsock_destroy (&self);
#     endif
#     if defined (ZMQ_SUBSCRIBE)
    self = zsock_new (ZMQ_SUB);
    assert (self);
    zsock_set_subscribe (self, "test");
    zsock_destroy (&self);
#     endif
#     if defined (ZMQ_UNSUBSCRIBE)
    self = zsock_new (ZMQ_SUB);
    assert (self);
    zsock_set_unsubscribe (self, "test");
    zsock_destroy (&self);
#     endif
#     if defined (ZMQ_IDENTITY)
    self = zsock_new (ZMQ_DEALER);
    assert (self);
    zsock_set_identity (self, "test");
    char *identity = zsock_identity (self);
    assert (identity);
    free (identity);
    zsock_destroy (&self);
#     endif
#     if defined (ZMQ_RATE)
    self = zsock_new (ZMQ_SUB);
    assert (self);
    zsock_set_rate (self, 1);
    assert (zsock_rate (self) == 1);
    zsock_rate (self);
    zsock_destroy (&self);
#     endif
#     if defined (ZMQ_RECOVERY_IVL)
    self = zsock_new (ZMQ_SUB);
    assert (self);
    zsock_set_recovery_ivl (self, 1);
    assert (zsock_recovery_ivl (self) == 1);
    zsock_recovery_ivl (self);
    zsock_destroy (&self);
#     endif
#     if defined (ZMQ_SNDBUF)
    self = zsock_new (ZMQ_PUB);
    assert (self);
    zsock_set_sndbuf (self, 1);
    assert (zsock_sndbuf (self) == 1);
    zsock_sndbuf (self);
    zsock_destroy (&self);
#     endif
#     if defined (ZMQ_RCVBUF)
    self = zsock_new (ZMQ_SUB);
    assert (self);
    zsock_set_rcvbuf (self, 1);
    assert (zsock_rcvbuf (self) == 1);
    zsock_rcvbuf (self);
    zsock_destroy (&self);
#     endif
#     if defined (ZMQ_LINGER)
    self = zsock_new (ZMQ_SUB);
    assert (self);
    zsock_set_linger (self, 1);
    assert (zsock_linger (self) == 1);
    zsock_linger (self);
    zsock_destroy (&self);
#     endif
#     if defined (ZMQ_RECONNECT_IVL)
    self = zsock_new (ZMQ_SUB);
    assert (self);
    zsock_set_reconnect_ivl (self, 1);
    assert (zsock_reconnect_ivl (self) == 1);
    zsock_reconnect_ivl (self);
    zsock_destroy (&self);
#     endif
#     if defined (ZMQ_RECONNECT_IVL_MAX)
    self = zsock_new (ZMQ_SUB);
    assert (self);
    zsock_set_reconnect_ivl_max (self, 1);
    assert (zsock_reconnect_ivl_max (self) == 1);
    zsock_reconnect_ivl_max (self);
    zsock_destroy (&self);
#     endif
#     if defined (ZMQ_BACKLOG)
    self = zsock_new (ZMQ_SUB);
    assert (self);
    zsock_set_backlog (self, 1);
    assert (zsock_backlog (self) == 1);
    zsock_backlog (self);
    zsock_destroy (&self);
#     endif
#     if defined (ZMQ_MAXMSGSIZE)
    self = zsock_new (ZMQ_SUB);
    assert (self);
    zsock_set_maxmsgsize (self, 1);
    assert (zsock_maxmsgsize (self) == 1);
    zsock_maxmsgsize (self);
    zsock_destroy (&self);
#     endif
#     if defined (ZMQ_MULTICAST_HOPS)
    self = zsock_new (ZMQ_SUB);
    assert (self);
    zsock_set_multicast_hops (self, 1);
    assert (zsock_multicast_hops (self) == 1);
    zsock_multicast_hops (self);
    zsock_destroy (&self);
#     endif
#     if defined (ZMQ_RCVTIMEO)
    self = zsock_new (ZMQ_SUB);
    assert (self);
    zsock_set_rcvtimeo (self, 1);
    assert (zsock_rcvtimeo (self) == 1);
    zsock_rcvtimeo (self);
    zsock_destroy (&self);
#     endif
#     if defined (ZMQ_SNDTIMEO)
    self = zsock_new (ZMQ_SUB);
    assert (self);
    zsock_set_sndtimeo (self, 1);
    assert (zsock_sndtimeo (self) == 1);
    zsock_sndtimeo (self);
    zsock_destroy (&self);
#     endif
#     if defined (ZMQ_XPUB_VERBOSE)
    self = zsock_new (ZMQ_XPUB);
    assert (self);
    zsock_set_xpub_verbose (self, 1);
    zsock_destroy (&self);
#     endif
#     if defined (ZMQ_TCP_KEEPALIVE)
    self = zsock_new (ZMQ_SUB);
    assert (self);
    zsock_set_tcp_keepalive (self, 1);
    assert (zsock_tcp_keepalive (self) == 1);
    zsock_tcp_keepalive (self);
    zsock_destroy (&self);
#     endif
#     if defined (ZMQ_TCP_KEEPALIVE_IDLE)
    self = zsock_new (ZMQ_SUB);
    assert (self);
    zsock_set_tcp_keepalive_idle (self, 1);
    assert (zsock_tcp_keepalive_idle (self) == 1);
    zsock_tcp_keepalive_idle (self);
    zsock_destroy (&self);
#     endif
#     if defined (ZMQ_TCP_KEEPALIVE_CNT)
    self = zsock_new (ZMQ_SUB);
    assert (self);
    zsock_set_tcp_keepalive_cnt (self, 1);
    assert (zsock_tcp_keepalive_cnt (self) == 1);
    zsock_tcp_keepalive_cnt (self);
    zsock_destroy (&self);
#     endif
#     if defined (ZMQ_TCP_KEEPALIVE_INTVL)
    self = zsock_new (ZMQ_SUB);
    assert (self);
    zsock_set_tcp_keepalive_intvl (self, 1);
    assert (zsock_tcp_keepalive_intvl (self) == 1);
    zsock_tcp_keepalive_intvl (self);
    zsock_destroy (&self);
#     endif
#     if defined (ZMQ_TCP_ACCEPT_FILTER)
    self = zsock_new (ZMQ_SUB);
    assert (self);
    zsock_set_tcp_accept_filter (self, "127.0.0.1");
    char *tcp_accept_filter = zsock_tcp_accept_filter (self);
    assert (tcp_accept_filter);
    free (tcp_accept_filter);
    zsock_destroy (&self);
#     endif
#     if defined (ZMQ_RCVMORE)
    self = zsock_new (ZMQ_SUB);
    assert (self);
    zsock_rcvmore (self);
    zsock_destroy (&self);
#     endif
#     if defined (ZMQ_FD)
    self = zsock_new (ZMQ_SUB);
    assert (self);
    zsock_fd (self);
    zsock_destroy (&self);
#     endif
#     if defined (ZMQ_EVENTS)
    self = zsock_new (ZMQ_SUB);
    assert (self);
    zsock_events (self);
    zsock_destroy (&self);
#     endif
#     if defined (ZMQ_LAST_ENDPOINT)
    self = zsock_new (ZMQ_SUB);
    assert (self);
    char *last_endpoint = zsock_last_endpoint (self);
    assert (last_endpoint);
    free (last_endpoint);
    zsock_destroy (&self);
#     endif
#endif

#if (ZMQ_VERSION_MAJOR == 2)
#     if defined (ZMQ_HWM)
    self = zsock_new (ZMQ_SUB);
    assert (self);
    zsock_set_hwm (self, 1);
    assert (zsock_hwm (self) == 1);
    zsock_hwm (self);
    zsock_destroy (&self);
#     endif
#     if defined (ZMQ_SWAP)
    self = zsock_new (ZMQ_SUB);
    assert (self);
    zsock_set_swap (self, 1);
    assert (zsock_swap (self) == 1);
    zsock_swap (self);
    zsock_destroy (&self);
#     endif
#     if defined (ZMQ_AFFINITY)
    self = zsock_new (ZMQ_SUB);
    assert (self);
    zsock_set_affinity (self, 1);
    assert (zsock_affinity (self) == 1);
    zsock_affinity (self);
    zsock_destroy (&self);
#     endif
#     if defined (ZMQ_IDENTITY)
    self = zsock_new (ZMQ_SUB);
    assert (self);
    zsock_set_identity (self, "test");
    char *identity = zsock_identity (self);
    assert (identity);
    free (identity);
    zsock_destroy (&self);
#     endif
#     if defined (ZMQ_RATE)
    self = zsock_new (ZMQ_SUB);
    assert (self);
    zsock_set_rate (self, 1);
    assert (zsock_rate (self) == 1);
    zsock_rate (self);
    zsock_destroy (&self);
#     endif
#     if defined (ZMQ_RECOVERY_IVL)
    self = zsock_new (ZMQ_SUB);
    assert (self);
    zsock_set_recovery_ivl (self, 1);
    assert (zsock_recovery_ivl (self) == 1);
    zsock_recovery_ivl (self);
    zsock_destroy (&self);
#     endif
#     if defined (ZMQ_RECOVERY_IVL_MSEC)
    self = zsock_new (ZMQ_SUB);
    assert (self);
    zsock_set_recovery_ivl_msec (self, 1);
    assert (zsock_recovery_ivl_msec (self) == 1);
    zsock_recovery_ivl_msec (self);
    zsock_destroy (&self);
#     endif
#     if defined (ZMQ_MCAST_LOOP)
    self = zsock_new (ZMQ_SUB);
    assert (self);
    zsock_set_mcast_loop (self, 1);
    assert (zsock_mcast_loop (self) == 1);
    zsock_mcast_loop (self);
    zsock_destroy (&self);
#     endif
#   if (ZMQ_VERSION_MINOR == 2)
#     if defined (ZMQ_RCVTIMEO)
    self = zsock_new (ZMQ_SUB);
    assert (self);
    zsock_set_rcvtimeo (self, 1);
    assert (zsock_rcvtimeo (self) == 1);
    zsock_rcvtimeo (self);
    zsock_destroy (&self);
#     endif
#   endif
#   if (ZMQ_VERSION_MINOR == 2)
#     if defined (ZMQ_SNDTIMEO)
    self = zsock_new (ZMQ_SUB);
    assert (self);
    zsock_set_sndtimeo (self, 1);
    assert (zsock_sndtimeo (self) == 1);
    zsock_sndtimeo (self);
    zsock_destroy (&self);
#     endif
#   endif
#     if defined (ZMQ_SNDBUF)
    self = zsock_new (ZMQ_SUB);
    assert (self);
    zsock_set_sndbuf (self, 1);
    assert (zsock_sndbuf (self) == 1);
    zsock_sndbuf (self);
    zsock_destroy (&self);
#     endif
#     if defined (ZMQ_RCVBUF)
    self = zsock_new (ZMQ_SUB);
    assert (self);
    zsock_set_rcvbuf (self, 1);
    assert (zsock_rcvbuf (self) == 1);
    zsock_rcvbuf (self);
    zsock_destroy (&self);
#     endif
#     if defined (ZMQ_LINGER)
    self = zsock_new (ZMQ_SUB);
    assert (self);
    zsock_set_linger (self, 1);
    assert (zsock_linger (self) == 1);
    zsock_linger (self);
    zsock_destroy (&self);
#     endif
#     if defined (ZMQ_RECONNECT_IVL)
    self = zsock_new (ZMQ_SUB);
    assert (self);
    zsock_set_reconnect_ivl (self, 1);
    assert (zsock_reconnect_ivl (self) == 1);
    zsock_reconnect_ivl (self);
    zsock_destroy (&self);
#     endif
#     if defined (ZMQ_RECONNECT_IVL_MAX)
    self = zsock_new (ZMQ_SUB);
    assert (self);
    zsock_set_reconnect_ivl_max (self, 1);
    assert (zsock_reconnect_ivl_max (self) == 1);
    zsock_reconnect_ivl_max (self);
    zsock_destroy (&self);
#     endif
#     if defined (ZMQ_BACKLOG)
    self = zsock_new (ZMQ_SUB);
    assert (self);
    zsock_set_backlog (self, 1);
    assert (zsock_backlog (self) == 1);
    zsock_backlog (self);
    zsock_destroy (&self);
#     endif
#     if defined (ZMQ_SUBSCRIBE)
    self = zsock_new (ZMQ_SUB);
    assert (self);
    zsock_set_subscribe (self, "test");
    zsock_destroy (&self);
#     endif
#     if defined (ZMQ_UNSUBSCRIBE)
    self = zsock_new (ZMQ_SUB);
    assert (self);
    zsock_set_unsubscribe (self, "test");
    zsock_destroy (&self);
#     endif
#     if defined (ZMQ_TYPE)
    self = zsock_new (ZMQ_SUB);
    assert (self);
    zsock_type (self);
    zsock_destroy (&self);
#     endif
#     if defined (ZMQ_RCVMORE)
    self = zsock_new (ZMQ_SUB);
    assert (self);
    zsock_rcvmore (self);
    zsock_destroy (&self);
#     endif
#     if defined (ZMQ_FD)
    self = zsock_new (ZMQ_SUB);
    assert (self);
    zsock_fd (self);
    zsock_destroy (&self);
#     endif
#     if defined (ZMQ_EVENTS)
    self = zsock_new (ZMQ_SUB);
    assert (self);
    zsock_events (self);
    zsock_destroy (&self);
#     endif
#endif


