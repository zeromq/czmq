zsock(3)
========

NAME
----
zsock - high-level socket API that hides libzmq contexts and sockets

SYNOPSIS
--------
----

//  Create a new socket. This macro passes the caller source and line
//  number so that CZMQ can report socket leaks intelligently. To switch
//  off this checking, which may be costly if you use a LOT of sockets,
//  define ZSOCK_NOCHECK before compiling your code.
#if defined (ZSOCK_NOCHECK)
#   define zsock_new(t) zsock_new_((t), NULL, 0)
#   define zsock_destroy(t) zsock_destroy_((t), NULL, 0)
#else
#   define zsock_new(t) zsock_new_((t), __FILE__, __LINE__)
#   define zsock_destroy(t) zsock_destroy_((t), __FILE__, __LINE__)
#endif

CZMQ_EXPORT zsock_t *
    zsock_new_ (int type, const char *filename, size_t line_nbr);

//  Destroy the socket. You must use this for any socket created via the
//  zsock_new method.
CZMQ_EXPORT void
    zsock_destroy_ (zsock_t **self_p, const char *filename, size_t line_nbr);

//  Bind a socket to a formatted endpoint. If the port is specified as '*'
//  and the endpoint starts with "tcp://", binds to an ephemeral TCP port in
//  a high range. Always returns the port number on successful TCP binds, else
//  returns zero on success. Returns -1 on failure. When using ephemeral ports,
//  note that ports may be reused by different threads, without clients being
//  aware.
CZMQ_EXPORT int
    zsock_bind (zsock_t *self, const char *format, ...);

//  Unbind a socket from a formatted endpoint.
//  Returns 0 if OK, -1 if the endpoint was invalid or the function
//  isn't supported.
CZMQ_EXPORT int
    zsock_unbind (zsock_t *self, const char *format, ...);

//  Connect a socket to a formatted endpoint
//  Returns 0 if OK, -1 if the endpoint was invalid.
CZMQ_EXPORT int
    zsock_connect (zsock_t *self, const char *format, ...);

//  Disconnect a socket from a formatted endpoint
//  Returns 0 if OK, -1 if the endpoint was invalid or the function
//  isn't supported.
CZMQ_EXPORT int
    zsock_disconnect (zsock_t *self, const char *format, ...);

//  Returns socket type as printable constant string
CZMQ_EXPORT const char *
    zsock_type_str (zsock_t *self);

//  Send a zmsg message to the socket, take ownership of the message
//  and destroy when it has been sent.
CZMQ_EXPORT int
    zsock_send (zsock_t *self, zmsg_t **msg_p);

//  Receive a zmsg message from the socket. Returns NULL if the process was
//  interrupted before the message could be received, or if a receive timeout
//  expired.
CZMQ_EXPORT zmsg_t *
    zsock_recv (zsock_t *self);

//  Send a signal over a socket. A signal is a short message carrying a
//  success/failure code (by convention, 0 means OK). Signals are encoded
//  to be distinguishable from "normal" messages. Accepts a zock_t or a
//  zactor_t argument, and returns 0 if successful, -1 if the signal could
//  not be sent.
CZMQ_EXPORT int
    zsock_signal (void *self, byte status);
    
//  Wait on a signal. Use this to coordinate between threads, over pipe
//  pairs. Blocks until the signal is received. Returns -1 on error, 0 or
//  greater on success. Accepts a zsock_t or a zactor_t as argument.
CZMQ_EXPORT int
    zsock_wait (void *self);

//  Probe the supplied object, and report if it looks like a zsock_t.
CZMQ_EXPORT bool
    zsock_is (void *self);

//  Probe the supplied reference. If it looks like a zsock_t instance,
//  return the underlying libzmq socket handle; else if it looks like
//  a libzmq socket handle, return the supplied value.
CZMQ_EXPORT void *
    zsock_resolve (void *self);

//  Self test of this class
CZMQ_EXPORT void
    zsock_test (bool verbose);
----

DESCRIPTION
-----------

The zsock class wraps the libzmq socket handle (a void *) with a proper
structure that follows the CLASS rules for construction and destruction.
CZMQ methods that accept a socket will accept either a zsock_t * or a
libzmq void *, and will detect the type at runtime.


EXAMPLE
-------
.From zsock_test method
----
    int service = 5560;

    zsock_t *writer = zsock_new (ZMQ_PUSH);
    assert (writer);
    assert (zsock_resolve (writer) != writer);
    zsock_t *reader = zsock_new (ZMQ_PULL);
    assert (reader);
    assert (zsock_resolve (reader) != reader);
    assert (streq (zsock_type_str (writer), "PUSH"));
    assert (streq (zsock_type_str (reader), "PULL"));
    int rc = zsock_bind (writer, "tcp://%s:%d", "127.0.0.1", service);
    assert (rc == service);

#if (ZMQ_VERSION >= ZMQ_MAKE_VERSION (3,2,0))
    //  Check unbind
    rc = zsock_unbind (writer, "tcp://%s:%d", "127.0.0.1", service);
    assert (rc == 0);

    //  In some cases and especially when running under Valgrind, doing
    //  a bind immediately after an unbind causes an EADDRINUSE error.
    //  Even a short sleep allows the OS to release the port for reuse.
    zclock_sleep (100);

    //  Bind again
    rc = zsock_bind (writer, "tcp://%s:%d", "127.0.0.1", service);
    assert (rc == service);
#endif

    rc = zsock_connect (reader, "tcp://%s:%d", "localhost", service);
    assert (rc == 0);
    zstr_send (writer, "Hello, World");
    zmsg_t *msg = zsock_recv (reader);
    assert (msg);
    char *string = zmsg_popstr (msg);
    assert (streq (string, "Hello, World"));
    free (string);
    zmsg_destroy (&msg);

    //  Test binding to ports
    int port = zsock_bind (writer, "tcp://%s:*", "127.0.0.1");
    assert (port >= DYNAMIC_FIRST && port <= DYNAMIC_LAST);

    //  Test error state when connecting to an invalid socket type
    //  ('txp://' instead of 'tcp://', typo intentional)
    rc = zsock_connect (reader, "txp://localhost:%d", service);
    assert (rc == -1);

    rc = zsock_signal (writer, 123);
    assert (rc == 0);
    rc = zsock_wait (reader);
    assert (rc == 123);

    zsock_destroy (&reader);
    zsock_destroy (&writer);
----

SEE ALSO
--------
linkczmq:czmq[7]
