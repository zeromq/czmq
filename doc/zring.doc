#### zring - generic type-free doubly linked ring container

Provides a generic container implementing a fast doubly-linked ring, aka
a ring. You can use this to construct multi-dimensional rings, and other
structures together with other generic containers like zhash.

To iterate through a ring, use zring_first to get the first item, then
loop while not null, and do zring_next at the end of each iteration.

This is the class interface:

    //  Create a new ring container (a ring is a doubly-linked ring)
    CZMQ_EXPORT zring_t *
        zring_new (void);
    
    //  Destroy a ring container
    CZMQ_EXPORT void
        zring_destroy (zring_t **self_p);
    
    //  Prepend an item to the start of the ring, return 0 if OK, else -1.
    //  Leaves cursor at newly inserted item.
    CZMQ_EXPORT int
        zring_prepend (zring_t *self, void *item);
    
    //  Append an item to the end of the ring, return 0 if OK, else -1.
    //  Leaves cursor at newly inserted item.
    CZMQ_EXPORT int
        zring_append (zring_t *self, void *item);
    
    //  Detach an item from the ring, without destroying the item. Searches the
    //  ring for the item, always starting with the cursor, if any is set, and
    //  then from the start of the ring. If item is null, detaches the item at the
    //  cursor, if set. If the item was found and detached, leaves the cursor at
    //  the next item, if any, and returns the item. Else, returns null.
    CZMQ_EXPORT void *
        zring_detach (zring_t *self, void *item);
    
    //  Remove an item from the ring, and destroy it, if the item destructor is
    //  set. Searches the ring for the item, always starting with the cursor, if
    //  any is set, and then from the start of the ring. If item is null, removes
    //  the item at the cursor, if set. If the item was found and removed, leaves
    //  the cursor at the next item, if any, and returns 0. Else, returns -1.
    CZMQ_EXPORT int
        zring_remove (zring_t *self, void *item);
    
    //  Delete all items from the ring. If the item destructor is set, calls it
    //  on every item.
    CZMQ_EXPORT void
        zring_purge (zring_t *self);
    
    //  Return number of items in the ring
    CZMQ_EXPORT size_t
        zring_size (zring_t *self);
    
    //  Return the item at the head of ring. If the ring is empty, returns NULL.
    //  Leaves cursor pointing at the head item, or NULL if the ring is empty.
    CZMQ_EXPORT void *
        zring_first (zring_t *self);
    
    //  Return the item at the tail of ring. If the ring is empty, returns NULL.
    //  Leaves cursor pointing at the tail item, or NULL if the ring is empty.
    CZMQ_EXPORT void *
        zring_last (zring_t *self);
        
    //  Return the next item. At the end of the ring (or in an empty ring),
    //  returns NULL. Use repeated zring_next () calls to work through the ring
    //  from zring_first ().
    CZMQ_EXPORT void *
        zring_next (zring_t *self);
        
    //  Return the previous item. At the start of the ring (or in an empty ring),
    //  returns NULL. Use repeated zring_prev () calls to work through the ring
    //  backwards from zring_last ().
    CZMQ_EXPORT void *
        zring_prev (zring_t *self);
    
    //  Return current item in the ring. If the ring is empty, or the cursor
    //  passed the end of the ring, returns NULL. Does not change the cursor.
    CZMQ_EXPORT void *
        zring_item (zring_t *self);
    
    //  Find an item in the ring, looking first at the cursor, and then from the
    //  first to last item. If a comparator was set on container, calls this to
    //  compare each item in the ring with the supplied target item. If none
    //  was set, compares the two item pointers for equality. If the item is
    //  found, leaves the cursor at the found item. Returns the item if found,
    //  else null.
    CZMQ_EXPORT void *
        zring_find (zring_t *self, void *item);
    
    //  Sort the list using the compare function.
    //  The sort is not stable, so may reorder items with the same keys.
    CZMQ_EXPORT void
        zlist_sort (zlist_t *self, zlist_compare_fn *compare);
    
    //  Make a copy of the ring; items are duplicated if you set a duplicator
    //  for the ring, otherwise not. Copying a null reference returns a null
    //  reference.
    CZMQ_EXPORT zring_t *
        zring_dup (zring_t *self);
    
    //  Set a user-defined deallocator for ring items; by default items are not
    //  freed when the ring is destroyed.
    CZMQ_EXPORT void
        zring_set_destructor (zring_t *self, czmq_destructor destructor);
    
    //  Set a user-defined duplicator for ring items; by default items are not
    //  copied when the ring is duplicated.
    CZMQ_EXPORT void
        zring_set_duplicator (zring_t *self, czmq_duplicator duplicator);
    
    //  Set a user-defined comparator for zring_find and zring_sort; the method
    //  must return -1, 0, or 1 depending on whether item1 is less than, equal to,
    //  or greater than, item2.
    CZMQ_EXPORT void
        zring_set_comparator (zring_t *self, czmq_comparator comparator);
    
    //  Self test of this class
    CZMQ_EXPORT void
        zring_test (int verbose);

This is the class self test code:

    zring_t *ring = zring_new ();
    assert (ring);
    assert (zring_size (ring) == 0);

    //  Three items we'll use as test data
    //  Ring items are void *, not particularly strings
    char *cheese = "boursin";
    char *bread = "baguette";
    char *wine = "bordeaux";

    int rc = zring_append (ring, cheese);
    assert (!rc);
    assert (zring_size (ring) == 1);
    assert (zring_item (ring) == cheese);
    rc = zring_append (ring, bread);
    assert (!rc);
    assert (zring_size (ring) == 2);
    assert (zring_item (ring) == bread);
    rc = zring_append (ring, wine);
    assert (!rc);
    assert (zring_size (ring) == 3);
    assert (zring_item (ring) == wine);

    assert (zring_first (ring) == cheese);
    assert (zring_next (ring) == bread);
    assert (zring_next (ring) == wine);
    assert (zring_next (ring) == NULL);
    //  After we reach end of ring, next wraps around
    assert (zring_next (ring) == cheese);
    
    assert (zring_last (ring) == wine);
    assert (zring_prev (ring) == bread);
    assert (zring_prev (ring) == cheese);
    assert (zring_prev (ring) == NULL);
    //  After we reach start of ring, prev wraps around
    assert (zring_prev (ring) == wine);
    zring_purge (ring);

    //  Test some list insertion-deletion combos
    char *zero = "0";
    char *one = "1";
    char *two = "2";
    char *three = "3";
    char *four = "4";
    char *five = "5";
    assert (zring_size (ring) == 0);
    zring_prepend (ring, four);
    zring_append (ring, three);
    zring_prepend (ring, five);
    zring_append (ring, two);
    zring_prepend (ring, zero);
    zring_append (ring, one);
    assert (zring_size (ring) == 6);

    //  Try the comparator
    zring_set_comparator (ring, (czmq_comparator *) strcmp);
    zring_sort (ring);
    
    assert (zring_first (ring) == zero);
    void *item = zring_find (ring, five);
    assert (item == five);

    //  Try the duplicator and destructor
    zring_set_duplicator (ring, (czmq_duplicator *) strdup);
    zring_t *dup = zring_dup (ring);
    assert (dup);
    zring_set_destructor (dup, (czmq_destructor *) zstr_free);
    assert (zring_size (dup) == 6);
    zring_destroy (&dup);

    rc = zring_remove (ring, two);
    assert (rc == 0);
    rc = zring_remove (ring, five);
    assert (rc == 0);
    rc = zring_remove (ring, three);
    assert (rc == 0);
    item = zring_detach (ring, NULL);

    //  Destructor should be safe to call twice
    zring_destroy (&ring);
    assert (ring == NULL);
    zring_destroy (&ring);

