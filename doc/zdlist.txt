zdlist(3)
=========

NAME
----
zdlist - generic type-free doubly linked list container

SYNOPSIS
--------
----
//  Dup function for zdlist items
typedef void * (zdlist_dup_fn) (void *item);

//  Free function for zdlist items
typedef void (zdlist_free_fn) (void **item);

//  Simple free_fn function that calls free
zdlist_free_fn zdlist_item_destroy;
    
//  Create a new list container
CZMQ_EXPORT zdlist_t *
    zdlist_new (zdlist_free_fn free_fn);

//  Destroy a list container
CZMQ_EXPORT void
    zdlist_destroy (zdlist_t **self_p);

//  Return first item in the list, or null
CZMQ_EXPORT void *
    zdlist_first (zdlist_t *self);

//  Return next item in the list, or null
CZMQ_EXPORT void *
    zdlist_next (zdlist_t *self);

//  Return last item in the list, or null
CZMQ_EXPORT void *
    zdlist_last (zdlist_t *self);

//  Return first item in the list, or null, leaves the cursor
CZMQ_EXPORT void *
    zdlist_head (zdlist_t *self);

//  Return last item in the list, or null, leaves the cursor
CZMQ_EXPORT void *
    zdlist_tail (zdlist_t *self);

//  Append an item to the end of the list, return item handle if OK
//  or NULL if this failed for some reason (out of memory).
CZMQ_EXPORT zdlist_node_t *
    zdlist_append (zdlist_t *self, void *item);

//  Push an item to the start of the list, return item handle if OK
//  or NULL if this failed for some reason (out of memory).
CZMQ_EXPORT zdlist_node_t *
    zdlist_push (zdlist_t *self, void *item);

//  Pop the item off the start of the list, if any. Resets the cursor if if
//  points to the first node.
CZMQ_EXPORT void *
    zdlist_pop (zdlist_t *self);

//  Remove the specified item handle from the list. Sets the cursor to the
//  previous node if it points to this node.
CZMQ_EXPORT void
    zdlist_remove (zdlist_t *self, zdlist_node_t **node_p);

//  Make a copy of list using the dup callback if any to duplicate each item.
//  The new list will use the new free_fn function to destroy items in the
//  future.
CZMQ_EXPORT zdlist_t *
    zdlist_dup (zdlist_t *self, zdlist_dup_fn dup, zdlist_free_fn free_fn);

//  Return number of items in the list
CZMQ_EXPORT size_t
    zdlist_size (zdlist_t *self);

//  Self test of this class
CZMQ_EXPORT void
    zdlist_test (int verbose);
----

DESCRIPTION
-----------

Provides a generic container implementing a fast doubly-linked list. You
can use this to construct multi-dimensional lists, and other structures
together with other generic containers like zhash.

To iterate through a list, use zdlist_first to get the first item, then
loop while not null, and do zdlist_next at the end of each iteration.

EXAMPLE
-------
.From zdlist_test method
----
    zdlist_t *list = zdlist_new (NULL);
    assert (list);
    assert (zdlist_size (list) == 0);

    //  Three items we'll use as test data
    //  List items are void *, not particularly strings
    char *cheese = "boursin";
    char *bread = "baguette";
    char *wine = "bordeaux";

    zdlist_node_t *node_cheese = zdlist_append (list, cheese);
    assert (zdlist_size (list) == 1);
    zdlist_node_t *node_bread = zdlist_append (list, bread);
    assert (zdlist_size (list) == 2);
    zdlist_node_t *node_wine = zdlist_append (list, wine);
    assert (zdlist_size (list) == 3);

    assert (zdlist_head (list) == cheese);
    assert (zdlist_next (list) == cheese);

    assert (zdlist_first (list) == cheese);
    assert (zdlist_tail (list) == wine);
    assert (zdlist_next (list) == bread);

    assert (zdlist_first (list) == cheese);
    assert (zdlist_next (list) == bread);
    assert (zdlist_next (list) == wine);
    assert (zdlist_next (list) == NULL);
    //  After we reach end of list, next wraps around
    assert (zdlist_next (list) == cheese);
    assert (zdlist_size (list) == 3);

    zdlist_remove (list, &node_wine);
    assert (zdlist_size (list) == 2);

    assert (zdlist_first (list) == cheese);
    zdlist_remove (list, &node_cheese);
    assert (zdlist_size (list) == 1);
    assert (zdlist_first (list) == bread);

    zdlist_remove (list, &node_bread);
    assert (zdlist_size (list) == 0);

    node_cheese = zdlist_append (list, cheese);
    node_bread = zdlist_append (list, bread);
    assert (zdlist_last (list) == bread);
    zdlist_remove (list, &node_bread);
    assert (zdlist_last (list) == cheese);
    zdlist_remove (list, &node_cheese);
    assert (zdlist_last (list) == NULL);

    node_cheese = zdlist_push (list, cheese);
    assert (zdlist_size (list) == 1);
    assert (zdlist_first (list) == cheese);

    node_bread = zdlist_push (list, bread);
    assert (zdlist_size (list) == 2);
    assert (zdlist_first (list) == bread);

    node_wine = zdlist_append (list, wine);
    assert (zdlist_size (list) == 3);
    assert (zdlist_first (list) == bread);

    zdlist_t *dup_list = zdlist_dup (list, NULL, NULL);
    assert (dup_list);
    assert (zdlist_size (dup_list) == 3);

    zdlist_t *list_list = zdlist_new ((zdlist_free_fn*)zdlist_destroy);
    zdlist_push (list_list, list);
    zdlist_push (list_list, dup_list);
    assert (zdlist_size (list_list) == 2);

    //  Destructor should be safe to call twice
    zdlist_destroy (&list_list);
    zdlist_destroy (&list_list);
    assert (list_list == NULL);
----

SEE ALSO
--------
linkczmq:czmq[7]
