################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Please refer to the README for information about making permanent changes.  #
################################################################################

module CZMQ
  module FFI
    
    # simple trie for tokenizable strings
    class Ztrie
      class DestroyedError < RuntimeError; end
      
      # Boilerplate for self pointer, initializer, and finalizer
      class << self
        alias :__new :new
      end
      def initialize ptr, finalize=true
        @ptr = ptr
        if @ptr.null?
          @ptr = nil # Remove null pointers so we don't have to test for them.
        elsif finalize
          @finalizer = self.class.send :create_finalizer_for, @ptr
          ObjectSpace.define_finalizer self, @finalizer
        end
      end
      def self.create_finalizer_for ptr
        Proc.new do
          ptr_ptr = ::FFI::MemoryPointer.new :pointer
          ptr_ptr.write_pointer ptr
          ::CZMQ::FFI.ztrie_destroy ptr_ptr
        end
      end
      def null?
        !@ptr or ptr.null?
      end
      # Return internal pointer
      def __ptr
        raise DestroyedError unless @ptr
        @ptr
      end
      # So external Libraries can just pass the Object to a FFI function which expects a :pointer
      alias_method :to_ptr, :__ptr
      # Nullify internal pointer and return pointer pointer
      def __ptr_give_ref
        raise DestroyedError unless @ptr
        ptr_ptr = ::FFI::MemoryPointer.new :pointer
        ptr_ptr.write_pointer @ptr
        ObjectSpace.undefine_finalizer self if @finalizer
        @finalizer = nil
        @ptr = nil
        ptr_ptr
      end
      
      # Create a new callback of the following type:
      # Callback function for ztrie_node to destroy node data.
      #     typedef void (ztrie_destroy_data_fn) (
      #         void **data);                     
      #
      # WARNING: If your Ruby code doesn't retain a reference to the
      #   FFI::Function object after passing it to a C function call,
      #   it may be garbage collected while C still holds the pointer,
      #   potentially resulting in a segmentation fault.
      def self.destroy_data_fn
        ::FFI::Function.new :void, [:pointer], blocking: true do |data|
          yield data
        end
      end
      
      # Creates a new ztrie.
      def self.new delimiter
        ptr = ::CZMQ::FFI.ztrie_new delimiter
        
        __new ptr
      end
      
      # Destroy the ztrie.
      def destroy
        return unless @ptr
        self_p = __ptr_give_ref
        result = ::CZMQ::FFI.ztrie_destroy self_p
        result
      end
      
      # Print properties of the ztrie object.
      def print
        raise DestroyedError unless @ptr
        result = ::CZMQ::FFI.ztrie_print @ptr
        result
      end
      
      # Inserts a new route into the tree and attaches the data. Returns -1     
      # if the route already exists, otherwise 0. This method takes ownership of
      # the provided data if a destroy_data_fn is provided.                     
      def insert_route path, data, destroy_data_fn
        raise DestroyedError unless @ptr
        result = ::CZMQ::FFI.ztrie_insert_route @ptr, path, data, destroy_data_fn
        result
      end
      
      # Removes a route from the trie and destroys its data. Returns -1 if the
      # route does not exists, otherwise 0.                                   
      # the start of the list call zlist_first (). Advances the cursor.       
      def remove_route path
        raise DestroyedError unless @ptr
        result = ::CZMQ::FFI.ztrie_remove_route @ptr, path
        result
      end
      
      # Returns true if the path matches a route in the tree, otherwise false.
      def matches path
        raise DestroyedError unless @ptr
        result = ::CZMQ::FFI.ztrie_matches @ptr, path
        result
      end
      
      # Returns the data of a matched route from last ztrie_matches. If the path
      # did not match, returns NULL. Do not delete the data as it's owned by    
      # ztrie.                                                                  
      def hit_data
        raise DestroyedError unless @ptr
        result = ::CZMQ::FFI.ztrie_hit_data @ptr
        result
      end
      
      # Returns the count of parameters that a matched route has.
      def hit_parameter_count
        raise DestroyedError unless @ptr
        result = ::CZMQ::FFI.ztrie_hit_parameter_count @ptr
        result
      end
      
      # Returns the parameters of a matched route with named regexes from last   
      # ztrie_matches. If the path did not match or the route did not contain any
      # named regexes, returns NULL.                                             
      def hit_parameters
        raise DestroyedError unless @ptr
        result = ::CZMQ::FFI.ztrie_hit_parameters @ptr
        result = Zhashx.__new result, false
        result
      end
      
      # Returns the asterisk matched part of a route, if there has been no match
      # or no asterisk match, returns NULL.                                     
      def hit_asterisk_match
        raise DestroyedError unless @ptr
        result = ::CZMQ::FFI.ztrie_hit_asterisk_match @ptr
        result
      end
      
      # Self test of this class
      def self.test verbose
        verbose = !(0==verbose||!verbose) # boolean
        result = ::CZMQ::FFI.ztrie_test verbose
        result
      end
    end
    
  end
end

################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Please refer to the README for information about making permanent changes.  #
################################################################################
