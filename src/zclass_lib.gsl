.template 0
#  Library functions for CLASS generation

function set_defaults ()
    resolve_types ()

    class.package_dir ?= "../include"
    class.source_dir ?= "."

    class.export_macro ?= ""
    if class.export_macro <> ""
        class.export_macro += " "
    endif

    for property
        property.is_ptr ?= "false"
        property.is_buffer ?= "false"
        property.name = "$(property.name:c)"
        if type = "number"
            property.size ?= 1
            property.ctype = get_ctype (size)
            if property.ctype = ""
                echo "E: bad size $(size) for $(name)"
            endif
        endif
    endfor

    for method
        method.is_ptr ?= "false"
        method.is_buffer ?= "false"
        method.name = "$(method.name:c)"
        if method.type = "number"
            method.size ?= 1
            method.ctype = get_ctype (method.size)
            if method.ctype = ""
                echo "E: bad size $(method.size) for $(method.name)"
            endif
        elsif method.type = "buffer"
            method.is_buffer = "true"
        endif
        if method.is_buffer = "true"
            method.is_ptr = "true"
            for method.arg as last_arg
                if last ()
                    new arg after last_arg
                        arg.name = method.name + "_size"
                        arg.type = "size_t"
                        arg.is_ptr = "true"
                        arg.is_buffer = "false"
                        arg. = last_arg.?''
                    endnew
                endif
            endfor
        endif
        for method.arg as cur_arg
            cur_arg.is_ptr ?= "false"
            cur_arg.is_buffer ?= "false"
            cur_arg.name = "$(cur_arg.name:c)"
            if cur_arg.type = "number"
                cur_arg.size ?= 1
                cur_arg.ctype = get_ctype (cur_arg.size)
                if cur_arg.ctype = ""
                    echo "E: bad size $(cur_arg.size) for $(cur_arg.name)"
                endif
            elsif cur_arg.type = "buffer"
                cur_arg.is_buffer = "true"
            endif
            if cur_arg.is_buffer = "true"
                cur_arg.is_ptr = "true"
                new arg after cur_arg
                    arg.name = cur_arg.name + "_size"
                    arg.type = "size_t"
                    arg.is_ptr = "false"
                    arg.is_buffer = "false"
                    arg. = cur_arg.?''
                endnew
            endif
        endfor
    endfor
endfunction

function get_ctype (size)
    if my.size = 1
        return "byte"
    elsif my.size = 2
        return "uint16_t"
    elsif my.size = 4
        return "uint32_t"
    elsif my.size = 8
        return "uint64_t"
    else
        return ""
    endif
endfunction

function get_type_str (item)
    if my.item.type = "number"
        if (defined (my.item.is_ptr) & my.item.is_ptr = "true")
            return "$(my.item.ctype) *"
        else
            return "$(my.item.ctype) "
        endif
    elsif my.item.type = "string"
        return "char *"
    elsif my.item.type = "strings"
        return "zlist_t *"
    elsif my.item.type = "dictionary"
        return "zhash_t *"
    elsif my.item.type = "octets" | my.item.type = "buffer"
        return "byte *"
    elsif type = "chunk" | type = "frame" | type = "uuid" | type = "msg"
        return "z$(my.item.type)_t *"
    else
        if (defined (my.item.is_ptr) & my.item.is_ptr = "true")
            return "$(my.item.type) *"
        else
            return "$(my.item.type) "
        endif
    endif
endfunction

function resolve_types ()
    for class.property
        for class.typedef where typedef.name = property.type
            property.type = "$(class.name)_$(typedef.name)_t"
        endfor
    endfor
    for class.method
        for class.typedef where typedef.name = method.type
            method.type = "$(class.name)_$(typedef.name)_t"
        endfor
        for method.arg
            for class.typedef where typedef.name = arg.type
                arg.type = "$(class.name)_$(typedef.name)_t"
            endfor
        endfor
    endfor
endfunction

function resolve_includes ()
    for class.include
        if defined (include.filename)
            my.include_file = class.load_file (filename)
            if defined (my.include_file)
                move my.include_file after include
            else
                echo "E: error loading include file: $(filename): $(xml.error?)"
            endif
        else
            echo "E: required attribute 'filename' not defined"
        endif
    endfor
endfunction

.endtemplate
