.#  This is a code generator built using the iMatix GSL code generation
.#  language. See https://github.com/imatix/gsl for details. This script 
.#  is licensed under MIT/X11.
.#
.output "../include/zsock_option.h"
/*  =========================================================================
    zsock_option - get/set 0MQ socket options

            ****************************************************
            *   GENERATED SOURCE CODE, DO NOT EDIT!!           *
            *   TO CHANGE THIS, EDIT scripts/sockopts.gsl      *
            *   AND RUN ./generate in models/.                 *
            ****************************************************

    Copyright (c) the Contributors as noted in the AUTHORS file.
    This file is part of CZMQ, the high-level C binding for 0MQ:
    http://czmq.zeromq.org.

    This Source Code Form is subject to the terms of the Mozilla Public
    License, v. 2.0. If a copy of the MPL was not distributed with this
    file, You can obtain one at http://mozilla.org/MPL/2.0/.
    =========================================================================
*/

#ifndef __ZSOCK_OPTION_H_INCLUDED__
#define __ZSOCK_OPTION_H_INCLUDED__

#ifdef __cplusplus
extern "C" {
#endif

//  @interface
.for version
#if (ZMQ_VERSION_MAJOR == $(major))
//  Get socket options
.   for option
.       if defined (.minor)
#   if (ZMQ_VERSION_MINOR == $(minor))
.       endif
.       if mode = "rw" | mode = "r"
CZMQ_EXPORT $(ctype) zsock_$(name) (zsock_t *self);
.       endif
.       if defined (.minor)
#   endif
.       endif
.   endfor

//  Set socket options
.   for option
.       if defined (.minor)
#   if (ZMQ_VERSION_MINOR == $(minor))
.       endif
.       if mode = "rw" | mode = "w"
CZMQ_EXPORT void zsock_set_$(name) (zsock_t *self, $(ctype_const) $(name));
.           if type = "key"
CZMQ_EXPORT void zsock_set_$(name)_bin (zsock_t *self, const byte *$(name));
.           endif
.       endif
.       if defined (.minor)
#   endif
.       endif
.   endfor
.   for header

$(string.trim(.):)
.   endfor
#endif

.endfor
//  Self test of this class
CZMQ_EXPORT void zsock_option_test (bool verbose);
//  @end

#ifdef __cplusplus
}
#endif

#endif
.output "../src/zsock_option.c"
/*  =========================================================================
    zsock_option - get/set 0MQ socket options

            ****************************************************
            *   GENERATED SOURCE CODE, DO NOT EDIT!!           *
            *   TO CHANGE THIS, EDIT scripts/sockopts.gsl      *
            *   AND RUN ./generate in models/.                 *
            ****************************************************

    Copyright (c) the Contributors as noted in the AUTHORS file.
    This file is part of CZMQ, the high-level C binding for 0MQ:
    http://czmq.zeromq.org.

    This Source Code Form is subject to the terms of the Mozilla Public
    License, v. 2.0. If a copy of the MPL was not distributed with this
    file, You can obtain one at http://mozilla.org/MPL/2.0/.
    =========================================================================
*/

/*
@header
    The zsock_option class provides access to the 0MQ getsockopt/setsockopt API.
@discuss
    This class is generated, using the GSL code generator. See the sockopts
    XML file, which provides the metadata, and the sock_option.gsl template,
    which does the work.
@end
*/

#include "../include/czmq.h"
#include "platform.h"

.for version
#if (ZMQ_VERSION_MAJOR == $(major))
.   for option
.       if defined (.minor)
#   if (ZMQ_VERSION_MINOR == $(minor))
.       endif
.       if mode = "rw" | mode = "w"
//  --------------------------------------------------------------------------
//  Set socket ZMQ_$(NAME) value
//  *** GENERATED SOURCE CODE, DO NOT EDIT, SEE INSTRUCTIONS AT START ***

void
zsock_set_$(name) (zsock_t *self, $(ctype_const) $(name))
{
    assert(self);
.       if style = "macro"
#   if defined (ZMQ_$(NAME))
.       endif
.           if count (restrict)
.               for restrict
.                   if first()
.                       .open = "if ("
.                   else
.                       .open = "&&  "
.                   endif
.                   if last()
.                       .close = ") {"
.                   else
.                       .close = ""
.                   endif
    $(open)zsock_type (self) != ZMQ_$(TYPE)$(close)
.               endfor
        printf ("ZMQ_$(NAME) is not valid on %s sockets\\n", zsock_type_str (self));
        assert (false);
    }
.           endif
.           if ctype = "int"
.               if type = "uint64"
    uint64_t value = $(name);
    int rc = zmq_setsockopt (zsock_resolve (self), ZMQ_$(NAME), &value, sizeof (uint64_t));
.               elsif type = "int64"
    int64_t value = $(name);
    int rc = zmq_setsockopt (zsock_resolve (self), ZMQ_$(NAME), &value, sizeof (int64_t));
.               elsif type = "uint32"
    uint32_t value = $(name);
    int rc = zmq_setsockopt (zsock_resolve (self), ZMQ_$(NAME), &value, sizeof (uint32_t));
.               else
    int rc = zmq_setsockopt (zsock_resolve (self), ZMQ_$(NAME), &$(name), sizeof (int));
.               endif
.           else
    int rc = zmq_setsockopt (zsock_resolve (self), ZMQ_$(NAME), $(name), strlen ($(name)));
.           endif
    assert (rc == 0 || zmq_errno () == ETERM);
.       if style = "macro"
#   endif
.       endif
}


.# Generate additional set_xxx_bin method
.if type = "key"
//  --------------------------------------------------------------------------
//  Set socket ZMQ_$(NAME) value from 32-octet binary
//  *** GENERATED SOURCE CODE, DO NOT EDIT, SEE INSTRUCTIONS AT START ***

void
zsock_set_$(name)_bin (zsock_t *self, const byte *$(name))
{
.       if style = "macro"
#   if defined (ZMQ_$(NAME))
.       endif
    int rc = zmq_setsockopt (zsock_resolve (self), ZMQ_$(NAME), $(name), 32);
    assert (rc == 0 || zmq_errno () == ETERM);
.       if style = "macro"
#   endif
.       endif
}


.endif
.           endif
.           if mode = "rw" | mode = "r"
//  --------------------------------------------------------------------------
//  Return socket ZMQ_$(NAME) value
//  *** GENERATED SOURCE CODE, DO NOT EDIT, SEE INSTRUCTIONS AT START ***

$(ctype) 
zsock_$(name) (zsock_t *self)
{
    assert(self);
.           if style = "macro"
#   if defined (ZMQ_$(NAME))
.           endif
.           if type = "uint64"
    uint64_t $(name);
    size_t option_len = sizeof (uint64_t);
    zmq_getsockopt (zsock_resolve (self), ZMQ_$(NAME), &$(name), &option_len);
.           elsif type = "int64"
    int64_t $(name);
    size_t option_len = sizeof (int64_t);
    zmq_getsockopt (zsock_resolve (self), ZMQ_$(NAME), &$(name), &option_len);
.           elsif type = "uint32"
    uint32_t $(name);
    size_t option_len = sizeof (uint32_t);
    zmq_getsockopt (zsock_resolve (self), ZMQ_$(NAME), &$(name), &option_len);
.           elsif type = "int"
    int $(name);
    size_t option_len = sizeof (int);
    zmq_getsockopt (zsock_resolve (self), ZMQ_$(NAME), &$(name), &option_len);
.           elsif type = "string"
    size_t option_len = 255;
    char *$(name) = (char *) zmalloc (option_len);
    zmq_getsockopt (zsock_resolve (self), ZMQ_$(NAME), $(name), &option_len);
.           elsif type = "key"
    size_t option_len = 40 + 1;     //  Z85 key + terminator
    char *$(name) = (char *) zmalloc (option_len);
    zmq_getsockopt (zsock_resolve (self), ZMQ_$(NAME), $(name), &option_len);
.           endif
.           if type = "int"
    return $(name);
.           else
    return ($(ctype)) $(name);
.           endif
.           if style = "macro"
#   else
.               if type = "string" | type = "key"
    return NULL;
.               else
    return 0;
.               endif
#   endif
.           endif
}


.       endif
.       if defined (.minor)
#   endif
.       endif
.   endfor
.   for source
$(string.trim(.):)

.   endfor
#endif

.endfor
//  --------------------------------------------------------------------------
//  Selftest
//  *** GENERATED SOURCE CODE, DO NOT EDIT, SEE INSTRUCTIONS AT START ***

void
zsock_option_test (bool verbose)
{
    printf (" * zsock_option: ");

    //  @selftest
    zsock_t *self;
.for version
#if (ZMQ_VERSION_MAJOR == $(major))
.   for option where defined (test)
.       if defined (.minor)
#   if (ZMQ_VERSION_MINOR == $(minor))
.       endif
.       if style = "macro"
#     if defined (ZMQ_$(NAME))
.       endif
    self = zsock_new (ZMQ_$(TEST));
    assert (self);
.       if mode = "rw" | mode = "w"
.           if ctype = "int"
    zsock_set_$(name) (self, 1);
.               if mode = "rw"
    assert (zsock_$(name) (self) == 1);
.               endif
.           else
    zsock_set_$(name) (self, "$(test_value?'test':)");
.           endif
.       endif
.       if mode = "rw" | mode = "r"
.           if type = "string" | type = "key"
    char *$(name) = zsock_$(name) (self);
    assert ($(name));
    free ($(name));
.           else
    zsock_$(name) (self);
.           endif
.       endif
    zsock_destroy (&self);
.       if style = "macro"
#     endif
.       endif
.       if defined (.minor)
#   endif
.       endif
.   endfor
.   for selftest

$(string.trim(.):)
.   endfor
#endif

.endfor
    //  @end

    printf ("OK\\n");
}
