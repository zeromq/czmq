################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Please refer to the README for information about making permanent changes.  #
################################################################################

########################################################################
# Project setup
########################################################################
cmake_minimum_required(VERSION 2.8)
project(czmq)
enable_language(C)
enable_testing()

set(SOURCE_DIR "${CMAKE_CURRENT_SOURCE_DIR}")
set(BINARY_DIR "${CMAKE_CURRENT_BINARY_DIR}")

########################################################################
# determine version
########################################################################
foreach(which MAJOR MINOR PATCH)
    file(STRINGS "${SOURCE_DIR}/include/czmq_library.h" CZMQ_VERSION_STRING REGEX "#define CZMQ_VERSION_${which}")
    string(REGEX MATCH "#define CZMQ_VERSION_${which} ([0-9_]+)" CZMQ_REGEX_MATCH "${CZMQ_VERSION_STRING}")
    if (NOT CZMQ_REGEX_MATCH)
        message(FATAL_ERROR "failed to parse CZMQ_VERSION_${which} from czmq.h")
    endif()
    set(CZMQ_${which}_VERSION ${CMAKE_MATCH_1})
endforeach(which)

set(CZMQ_VERSION ${CZMQ_MAJOR_VERSION}.${CZMQ_MINOR_VERSION}.${CZMQ_PATCH_VERSION})

########################################################################
# platform.h
########################################################################
include(CheckIncludeFile)
CHECK_INCLUDE_FILE("linux/wireless.h" HAVE_LINUX_WIRELESS_H)
CHECK_INCLUDE_FILE("net/if_media.h" HAVE_NET_IF_MEDIA_H)

include(CheckFunctionExists)
CHECK_FUNCTION_EXISTS("getifaddrs" HAVE_GETIFADDRS)
CHECK_FUNCTION_EXISTS("freeifaddrs" HAVE_FREEIFADDRS)

include(CheckIncludeFiles)
check_include_files("sys/socket.h;net/if.h" HAVE_NET_IF_H)
if (NOT HAVE_NET_IF_H)
    CHECK_INCLUDE_FILE("net/if.h" HAVE_NET_IF_H)
endif()

file(WRITE "${BINARY_DIR}/platform.h.in" "
#cmakedefine HAVE_LINUX_WIRELESS_H
#cmakedefine HAVE_NET_IF_H
#cmakedefine HAVE_NET_IF_MEDIA_H
#cmakedefine HAVE_GETIFADDRS
#cmakedefine HAVE_FREEIFADDRS
")

configure_file("${BINARY_DIR}/platform.h.in" "${BINARY_DIR}/platform.h")

#The MSVC C compiler is too out of date,
#so the sources have to be compiled as c++
if (MSVC)
    enable_language(CXX)
    file(GLOB sources "${SOURCE_DIR}/src/*.c")
    set_source_files_properties(${sources} PROPERTIES LANGUAGE CXX)
    set(MORE_LIBRARIES ws2_32 Rpcrt4 Iphlpapi)
endif()

# required libraries for mingw
if (MINGW)
    set(MORE_LIBRARIES -lws2_32 -lrpcrt4 -liphlpapi)
endif()

# required libraries for cygwin
if (CYGWIN)
    set(MORE_LIBRARIES -luuid)
endif()

list(APPEND CMAKE_MODULE_PATH "${SOURCE_DIR}")

########################################################################
# LIBZMQ dependency
########################################################################
find_package(ZeroMQ REQUIRED)
IF (ZEROMQ_FOUND)
include_directories(${ZEROMQ_INCLUDE_DIRS})
list(APPEND MORE_LIBRARIES ${ZEROMQ_LIBRARIES})
ELSE (ZEROMQ_FOUND)
message( FATAL_ERROR "ZeroMQ not found." )
ENDIF (ZEROMQ_FOUND)

########################################################################
# UUID dependency
########################################################################
find_package(Uuid)
IF (UUID_FOUND)
include_directories(${UUID_INCLUDE_DIRS})
list(APPEND MORE_LIBRARIES ${UUID_LIBRARIES})
add_definitions(-DHAVE_UUID)
ELSE (UUID_FOUND)
message( FATAL_ERROR "Uuid not found." )
ENDIF (UUID_FOUND)

########################################################################
# includes
########################################################################
set (czmq_headers
    include/czmq_library.h
    include/czmq_prelude.h
    include/czmq.h
    include/zactor.h
    include/zauth.h
    include/zarmour.h
    include/zbeacon.h
    include/zcert.h
    include/zcertstore.h
    include/zchunk.h
    include/zclock.h
    include/zconfig.h
    include/zdigest.h
    include/zdir.h
    include/zdir_patch.h
    include/zfile.h
    include/zframe.h
    include/zgossip.h
    include/zhashx.h
    include/ziflist.h
    include/zlistx.h
    include/zloop.h
    include/zmonitor.h
    include/zmsg.h
    include/zpoller.h
    include/zproxy.h
    include/zrex.h
    include/zsock.h
    include/zsock_option.h
    include/zstr.h
    include/zsys.h
    include/ztrie.h
    include/zuuid.h
    src/zgossip_msg.h
    include/zauth_v2.h
    include/zbeacon_v2.h
    include/zctx.h
    include/zhash.h
    include/zlist.h
    include/zmonitor_v2.h
    include/zmutex.h
    include/zproxy_v2.h
    include/zsocket.h
    include/zsockopt.h
    include/zthread.h
    src/zgossip_engine.inc
    src/zhash_primes.inc
    src/zclass_example.xml
    src/foreign/sha1/sha1.inc_c
    src/foreign/sha1/sha1.h
    src/foreign/slre/slre.inc_c
    src/foreign/slre/slre.h
    src/foreign/slre/readme.txt
)
source_group ("Header Files" FILES ${czmq_headers})
install(FILES ${czmq_headers} DESTINATION include)

########################################################################
# library
########################################################################
include_directories("${BINARY_DIR}" "${SOURCE_DIR}/include")
set (czmq_sources
    src/zactor.c
    src/zauth.c
    src/zarmour.c
    src/zbeacon.c
    src/zcert.c
    src/zcertstore.c
    src/zchunk.c
    src/zclock.c
    src/zconfig.c
    src/zdigest.c
    src/zdir.c
    src/zdir_patch.c
    src/zfile.c
    src/zframe.c
    src/zgossip.c
    src/zhashx.c
    src/ziflist.c
    src/zlistx.c
    src/zloop.c
    src/zmonitor.c
    src/zmsg.c
    src/zpoller.c
    src/zproxy.c
    src/zrex.c
    src/zsock.c
    src/zsock_option.c
    src/zstr.c
    src/zsys.c
    src/ztrie.c
    src/zuuid.c
    src/zgossip_msg.c
    src/zauth_v2.c
    src/zbeacon_v2.c
    src/zctx.c
    src/zhash.c
    src/zlist.c
    src/zmonitor_v2.c
    src/zmutex.c
    src/zproxy_v2.c
    src/zsocket.c
    src/zsockopt.c
    src/zthread.c
)
source_group ("Source Files" FILES ${czmq_sources})
if (NOT DEFINED BUILD_SHARED_LIBS)
    SET(BUILD_SHARED_LIBS ON)
endif()
add_library(czmq ${czmq_sources})
set_target_properties(czmq PROPERTIES DEFINE_SYMBOL "LIBCZMQ_EXPORTS")
target_link_libraries(czmq ${ZEROMQ_LIBRARIES} ${MORE_LIBRARIES})

install(TARGETS czmq
    LIBRARY DESTINATION "lib${LIB_SUFFIX}" # .so file
    ARCHIVE DESTINATION "lib${LIB_SUFFIX}" # .lib file
    RUNTIME DESTINATION bin              # .dll file
)

include(${CMAKE_CURRENT_SOURCE_DIR}/src/CMakeLists-local.txt) # Optional project-local hook

########################################################################
# pkgconfig
########################################################################
set(VERSION "${CZMQ_VERSION}")
set(prefix "${CMAKE_INSTALL_PREFIX}")
set(exec_prefix "\${prefix}")
set(libdir "\${prefix}/lib${LIB_SUFFIX}")
set(includedir "\${prefix}/include")
configure_file(
    "${SOURCE_DIR}/src/libczmq.pc.in"
    "${BINARY_DIR}/libczmq.pc"
@ONLY)

install(
    FILES "${BINARY_DIR}/libczmq.pc"
    DESTINATION "lib${LIB_SUFFIX}/pkgconfig"
)

########################################################################
# tests
########################################################################
add_executable(czmq_selftest "${SOURCE_DIR}/src/czmq_selftest.c")
target_link_libraries(czmq_selftest czmq ${ZEROMQ_LIBRARIES})

set(CLASSTEST_TIMEOUT 5 CACHE STRING "Timeout of the selftest of a class")
set(TOTAL_TIMEOUT 20 CACHE STRING "Timout of the total testsuite")

set(TEST_CLASSES
  zactor_test
  zauth_test
  zarmour_test
  zbeacon_test
  zcert_test
  zcertstore_test
  zchunk_test
  zclock_test
  zconfig_test
  zdigest_test
  zdir_test
  zdir patch_test
  zfile_test
  zframe_test
  zgossip_test
  zhashx_test
  ziflist_test
  zlistx_test
  zloop_test
  zmonitor_test
  zmsg_test
  zpoller_test
  zproxy_test
  zrex_test
  zsock_test
  zsock_option_test
  zstr_test
  zsys_test
  ztrie_test
  zuuid_test
  zgossip_msg_test
  zauth_v2_test
  zbeacon_v2_test
  zctx_test
  zhash_test
  zlist_test
  zmonitor_v2_test
  zmutex_test
  zproxy_v2_test
  zsocket_test
  zsockopt_test
  zthread_test
)

foreach(TEST_CLASS ${TEST_CLASSES})
  add_test(NAME ${TEST_CLASS} COMMAND czmq_selftest -e -v --test ${TEST_CLASS})
  set_tests_properties(${TEST_CLASS} PROPERTIES TIMEOUT ${CLASSTEST_TIMEOUT})
endforeach(TEST_CLASS)

add_test(czmq_selftest czmq_selftest)
set_tests_properties(czmq_selftest PROPERTIES TIMEOUT ${TOTAL_TIMEOUT})
########################################################################
# summary
########################################################################
message(STATUS "version: ${CZMQ_VERSION}")
message(STATUS "install: ${CMAKE_INSTALL_PREFIX}")

################################################################################
#  THIS FILE IS 100% GENERATED BY ZPROJECT; DO NOT EDIT EXCEPT EXPERIMENTALLY  #
#  Please refer to the README for information about making permanent changes.  #
################################################################################
